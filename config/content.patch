diff --git a/browser/base/content/baseMenuOverlay.xul b/browser/base/content/baseMenuOverlay.xul
--- a/browser/base/content/baseMenuOverlay.xul
+++ b/browser/base/content/baseMenuOverlay.xul
@@ -98,17 +98,17 @@
              oncommand="openHelpLink('firefox-osxkey');"
              key="&helpMac.commandkey;"
              modifiers="accel"/>
 <!-- These are used to build the Application menu under Cocoa widgets -->
         <key id="key_preferencesCmdMac"
              key="&preferencesCmdMac.commandkey;"
              modifiers="accel"/>
         <key id="key_hideThisAppCmdMac"
-             key="&hideThisAppCmdMac2.commandkey;"
+             key="&hideThisAppCmdMac.commandkey;"
              modifiers="accel"/>
         <key id="key_hideOtherAppsCmdMac"
              key="&hideOtherAppsCmdMac.commandkey;"
              modifiers="accel,alt"/>
 #endif
     </keyset>
 
     <stringbundleset id="stringbundleset">
diff --git a/browser/branding/unofficial/background.png b/browser/branding/unofficial/background.png
index 3fa4a0ec730bb3b63202ccc311750f4b71fbc1ce..ee1ce0b8d9b9dd63d5d225f9fcec9c2073f0bfb1
GIT binary patch
literal 10931
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
H2_5)fmNijp

diff --git a/browser/branding/unofficial/disk.icns b/browser/branding/unofficial/disk.icns
index 718f1a3d3c6a8784d5ac7f7eea07b614a2e6365d..e5550f81d61aa65831179be075641c017634371c
GIT binary patch
literal 178235
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

diff --git a/browser/branding/unofficial/dsstore b/browser/branding/unofficial/dsstore
index 2d11482a750465312e1fa0f6957ba15992be0643..a05ee7a1b4178b9b7290d8dc98398e9c3fd82726
GIT binary patch
literal 12292
zc%1E7O>7%Q6n^74W%JWy^V5<xRlCI!0-CJt*ol*<qONJ0Myiwur)@%#nzeWAtYYt4
zyX%+|41o$E!~w*uRmF`na7PhR;m|`*h;S^NxN@Vn@Wwk%948?HA@P&>tl97F&YQRI
zy&1ppt^t4~N_rTe4*(?aSZ;%TA@Q~cKF-Im5gZRznwi0q%KnxF1Ox;G1O)zZ5Raq-
z_I&{Xfg=o79~91U&g&i%-tXh=uNxzCRyfBwuX{|mo{zJiv&32EtZ<HVUiX+6Ey5o@
z2){GoPbfs@tZ<J1sgMN(jugCScV#MXWzzXw&+i|y-mNVyUe!?3Wv9qBzDO7IhU11p
zo5a`TZ$9>n)FQRCFWxdt-6|)nlBqij$z`jYG<2HQ?4_#gYHrC%Xm+({Mst_bT%NV8
zJj#n)`<9`*%PF~UZ7m#*3@EWkv@)Qq4G#?uD3QoWrNZtde<z)IPQ7?-R(q@R_B-od
zB(=%_#~VU?&kMlFtnvW-ztsYGB6n_w(Aw61yrWa@>h9@1aq`)|Q>XjS^q)=1J!vho
zlCxP<uUL7@PUK5;UbAh@%+bW1g`92Z$)c7q%-ozy-*A)0n=~bNHw=1}>bG|;&E6@Z
zPH%(Gq)n+=wKtv3I@F!3ljj#5%+!=i3sYv+Li?)*El(F+!!n(l)OL`U@>-har_F@r
zx>jMA`Kf}IqnGoB=A`7#s-cW!&e)V0nKMvkP6sai>ZNPev`iX^&wFQq_zPU9^~=6(
zF;GkKwjjySGTqgrG8vCpq}y1+CT$~|wamuF_xS#kjcXU68FeQ*cKlU~X6`R6<)*8T
z@BehZcD9AUwcu+|YEyUa!`8aQym<H-_H=pjw*>gE)HH$qKVRqmc-`3X26sE)EVeXg
zkbxD*fejXvzyuvsC?e;e6Z)VH5|GF16edx_fGmD2?CpmBV4d+`V=j8&WbmeyFBPa0
ztaC^SLoeB2Vc`)YZBLq3S-DQFqGsz2fj>%h{DQe=*gTg;8#&L$U|1bdht#n^G#0x$
zIvP>+!lB9cm!ICnx%*nDtG2E?D_*W!l*S2h3q_veM=AJmC&v#TKyAn0#P$RFK3ebk
zc+oaiHJ6T~f$_t9?SMJBfSLF5n%kAvK?r01N3acH8^aHiLU=WT$0#!Er&Y}xkVLsq
zok11ntx%n_)6kCBO|(|VUnJL2*TVVK@Gd&eT8ujyL`Q@BI69^dg~E|gG#pl`Id~(f
z7PO3);2t1BU|FkXE)ZYfIg{W;xCB$^&24b7blro`;VamH@8M^7N?J(|IYZ8qmq>(M
zBrlUmGDGIcYh;lu`9Jo5;+gQ(3gNkiS-Z#9KgPDtDy^&TU+$^yQmgbgSNBtEYmuRm
z@PHB>9%bb{77L*qjaDixth|3yEAOnjzw3E_V0pibtsO4otQ2t#7#NubE;5^cr(s`v
zANd1p%`EGP&I7)WD%wDMyGO&P*gj&3+}bL{5BrY%2hikEAAA0vIQad)fPldN7{q@i
zc_jhcF9i31{fJVqy<QstfBYhV)cs-juX_<7_J6Vei~V0fKtMo1KtMo1KtMo1K;Q`A
EcS+$nWdHyG

diff --git a/browser/locales/en-US/chrome/browser/baseMenuOverlay.dtd b/browser/locales/en-US/chrome/browser/baseMenuOverlay.dtd
--- a/browser/locales/en-US/chrome/browser/baseMenuOverlay.dtd
+++ b/browser/locales/en-US/chrome/browser/baseMenuOverlay.dtd
@@ -41,14 +41,14 @@
 <!ENTITY helpShowTour2.accesskey        "o">
 
 <!ENTITY preferencesCmdMac.label        "Preferences…">
 <!ENTITY preferencesCmdMac.commandkey   ",">
 
 <!ENTITY servicesMenuMac.label          "Services">
 
 <!ENTITY hideThisAppCmdMac2.label       "Hide &brandShorterName;">
-<!ENTITY hideThisAppCmdMac2.commandkey  "H">
+<!ENTITY hideThisAppCmdMac.commandkey  "H">
 
 <!ENTITY hideOtherAppsCmdMac.label      "Hide Others">
 <!ENTITY hideOtherAppsCmdMac.commandkey "H">
 
 <!ENTITY showAllAppsCmdMac.label        "Show All">
diff --git a/build/mach_bootstrap.py b/build/mach_bootstrap.py
--- a/build/mach_bootstrap.py
+++ b/build/mach_bootstrap.py
@@ -97,17 +97,17 @@ SEARCH_PATHS = [
     'testing/web-platform/tests/tools/wptserve',
     'testing/web-platform/tests/tools/six',
     'testing/xpcshell',
     'xpcom/idl-parser',
 ]
 
 # Individual files providing mach commands.
 MACH_MODULES = [
-    'addon-sdk/mach_commands.py',
+#    'addon-sdk/mach_commands.py',
     'build/valgrind/mach_commands.py',
     'devtools/shared/css/generated/mach_commands.py',
     'dom/bindings/mach_commands.py',
     'dom/media/test/external/mach_commands.py',
     'layout/tools/reftest/mach_commands.py',
     'python/mach_commands.py',
     'python/mach/mach/commands/commandinfo.py',
     'python/mach/mach/commands/settings.py',
diff --git a/caps/nsScriptSecurityManager.cpp b/caps/nsScriptSecurityManager.cpp
--- a/caps/nsScriptSecurityManager.cpp
+++ b/caps/nsScriptSecurityManager.cpp
@@ -890,16 +890,17 @@ nsScriptSecurityManager::CheckLoadURIFla
     }
 
     // Check for target URI pointing to a file
     rv = NS_URIChainHasFlags(aTargetURI,
                              nsIProtocolHandler::URI_IS_LOCAL_FILE,
                              &hasFlags);
     NS_ENSURE_SUCCESS(rv, rv);
     if (hasFlags) {
+        return NS_OK;
         // Allow domains that were whitelisted in the prefs. In 99.9% of cases,
         // this array is empty.
         for (nsIURI* uri : EnsureFileURIWhitelist()) {
             if (EqualOrSubdomain(aSourceURI, uri)) {
                 return NS_OK;
             }
         }
 
diff --git a/dom/base/nsCopySupport.cpp b/dom/base/nsCopySupport.cpp
--- a/dom/base/nsCopySupport.cpp
+++ b/dom/base/nsCopySupport.cpp
@@ -150,17 +150,18 @@ SelectionCopyHelper(nsISelection *aSel, 
     nsCOMPtr<nsIHTMLDocument> htmlDoc = do_QueryInterface(aDoc);
     if (!htmlDoc) {
       selForcedTextPlain = true;
     }
   }
 
   // The mime type is ultimately text/html if the encoder successfully encoded
   // the selection as text/html.
-  bool encodedTextHTML = mimeType.EqualsLiteral(kHTMLMime);
+  bool encodedTextHTML = mimeType.EqualsLiteral(kHTMLMime) ||
+                         mimeType.EqualsLiteral("application/xhtml+xml");
 
   // First, prepare the text/plain clipboard flavor.
   nsAutoString textPlainBuf;
   if (selForcedTextPlain) {
     // Nothing to do.  buf contains the final, preformatted, raw text/plain.
     textPlainBuf.Assign(buf);
   } else {
     // Redo the encoding, but this time use pretty printing.
@@ -553,18 +554,19 @@ static nsresult AppendDOMNode(nsITransfe
   DebugOnly<nsCOMPtr<nsIHTMLDocument>> htmlDoc =
     nsCOMPtr<nsIHTMLDocument>(do_QueryInterface(document, &rv));
   NS_ENSURE_SUCCESS(rv, NS_OK);
 
   NS_ENSURE_TRUE(document->IsHTMLDocument(), NS_OK);
 
   // init encoder with document and node
   rv = docEncoder->NativeInit(document, NS_LITERAL_STRING(kHTMLMime),
-                              nsIDocumentEncoder::OutputAbsoluteLinks |
-                              nsIDocumentEncoder::OutputEncodeW3CEntities);
+                              Preferences::GetBool("clipboard.absoluteLinks", true)
+                                ? nsIDocumentEncoder::OutputEncodeCharacterEntities | nsIDocumentEncoder::OutputAbsoluteLinks
+                                : nsIDocumentEncoder::OutputEncodeCharacterEntities);
   NS_ENSURE_SUCCESS(rv, rv);
 
   rv = docEncoder->SetNativeNode(aDOMNode);
   NS_ENSURE_SUCCESS(rv, rv);
 
   // serialize to string
   nsAutoString html, context, info;
   rv = docEncoder->EncodeToStringWithContext(context, info, html);
diff --git a/dom/base/nsDocument.cpp b/dom/base/nsDocument.cpp
--- a/dom/base/nsDocument.cpp
+++ b/dom/base/nsDocument.cpp
@@ -7305,16 +7305,23 @@ nsDocument::GetInputEncoding(nsAString& 
 
 NS_IMETHODIMP
 nsDocument::GetMozSyntheticDocument(bool *aSyntheticDocument)
 {
   *aSyntheticDocument = mIsSyntheticDocument;
   return NS_OK;
 }
 
+ NS_IMETHODIMP
+nsDocument::GetHasXMLDeclaration(bool *aHasXMLDeclaration)
+{
+  *aHasXMLDeclaration = mXMLDeclarationBits & XML_DECLARATION_BITS_DECLARATION_EXISTS;
+  return NS_OK;
+}
+
 NS_IMETHODIMP
 nsDocument::GetDocumentURI(nsAString& aDocumentURI)
 {
   nsString temp;
   nsresult rv = nsIDocument::GetDocumentURI(temp);
   aDocumentURI = temp;
   return rv;
 }
diff --git a/dom/base/nsDocumentEncoder.cpp b/dom/base/nsDocumentEncoder.cpp
--- a/dom/base/nsDocumentEncoder.cpp
+++ b/dom/base/nsDocumentEncoder.cpp
@@ -114,16 +114,21 @@ protected:
       ShadowRoot* shadowRoot = ShadowRoot::FromNode(aNode);
       if (shadowRoot) {
         content = shadowRoot->GetHost();
       } else {
         content = do_QueryInterface(aNode);
       }
 
       if (content) {
+        nsIAtom *tag = content->NodeInfo()->NameAtom();
+        if (tag == nsGkAtoms::script
+            || tag == nsGkAtoms::style) {
+          return true;
+        }
         nsIFrame* frame = content->GetPrimaryFrame();
         if (!frame) {
           if (aNode->IsNodeOfType(nsINode::eTEXT)) {
             // We have already checked that our parent is visible.
             return true;
           }
           if (aNode->IsHTMLElement(nsGkAtoms::rp)) {
             // Ruby parentheses are part of ruby structure, hence
@@ -1302,17 +1307,19 @@ nsHTMLCopyEncoder::Init(nsIDOMDocument* 
   if (aMimeType.EqualsLiteral("text/plain")) {
     mMimeType.AssignLiteral("text/plain");
   } else {
     mMimeType.AssignLiteral("text/html");
   }
 
   // Make all links absolute when copying
   // (see related bugs #57296, #41924, #58646, #32768)
-  mFlags = aFlags | OutputAbsoluteLinks;
+  mFlags = Preferences::GetBool("clipboard.absoluteLinks", true)
+             ? aFlags | nsIDocumentEncoder::OutputAbsoluteLinks
+             : aFlags;
 
   if (!mDocument->IsScriptEnabled())
     mFlags |= OutputNoScriptContent;
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
@@ -1403,17 +1410,17 @@ nsHTMLCopyEncoder::SetSelection(nsISelec
     return NS_OK;
   }
 
   // XXX We should try to get rid of the Selection object here.
   // XXX bug 1245883
 
   // also consider ourselves in a text widget if we can't find an html document
   nsCOMPtr<nsIHTMLDocument> htmlDoc = do_QueryInterface(mDocument);
-  if (!(htmlDoc && mDocument->IsHTMLDocument())) {
+  if (!htmlDoc) {
     mIsTextWidget = true;
     mSelection = aSelection;
     // mMimeType is set to text/plain when encoding starts.
     return NS_OK;
   }
 
   // there's no Clone() for selection! fix...
   //nsresult rv = aSelection->Clone(getter_AddRefs(mSelection);
@@ -1424,19 +1431,20 @@ nsHTMLCopyEncoder::SetSelection(nsISelec
   // loop thru the ranges in the selection
   for (uint32_t rangeIdx = 0; rangeIdx < rangeCount; ++rangeIdx) {
     range = selection->GetRangeAt(rangeIdx);
     NS_ENSURE_TRUE(range, NS_ERROR_FAILURE);
     nsCOMPtr<nsIDOMRange> myRange;
     range->CloneRange(getter_AddRefs(myRange));
     NS_ENSURE_TRUE(myRange, NS_ERROR_FAILURE);
 
+    // BLUEGRIFFON, do not promote ranges for copy
     // adjust range to include any ancestors who's children are entirely selected
-    rv = PromoteRange(myRange);
-    NS_ENSURE_SUCCESS(rv, rv);
+    /*rv = PromoteRange(myRange);
+    NS_ENSURE_SUCCESS(rv, rv);*/
 
     ErrorResult result;
     nsRange* r = static_cast<nsRange*>(myRange.get());
     mSelection->AsSelection()->AddRangeInternal(*r, mDocument, result);
     rv = result.StealNSResult();
     NS_ENSURE_SUCCESS(rv, rv);
   }
 
diff --git a/dom/base/nsFocusManager.cpp b/dom/base/nsFocusManager.cpp
--- a/dom/base/nsFocusManager.cpp
+++ b/dom/base/nsFocusManager.cpp
@@ -2711,41 +2711,16 @@ nsFocusManager::DetermineElementToMoveFo
         if (startContent ==
               nsLayoutUtils::GetEditableRootContentByContentEditable(doc)) {
           doNavigation = false;
         }
       }
     }
   }
   else {
-#ifdef MOZ_XUL
-    if (aType != MOVEFOCUS_CARET) {
-      // if there is no focus, yet a panel is open, focus the first item in
-      // the panel
-      nsXULPopupManager* pm = nsXULPopupManager::GetInstance();
-      if (pm)
-        popupFrame = pm->GetTopPopup(ePopupTypePanel);
-    }
-#endif
-    if (popupFrame) {
-      // When there is a popup open, and no starting content, start the search
-      // at the topmost popup.
-      startContent = popupFrame->GetContent();
-      NS_ASSERTION(startContent, "Popup frame doesn't have a content node");
-      // Unless we are searching for documents, set the root content to the
-      // popup as well, so that we don't tab-navigate outside the popup.
-      // When navigating by documents, we start at the popup but can navigate
-      // outside of it to look for other panels and documents.
-      if (!forDocumentNavigation) {
-        rootContent = startContent;
-      }
-
-      doc = startContent ? startContent->GetComposedDoc() : nullptr;
-    }
-    else {
       // Otherwise, for content shells, start from the location of the caret.
       nsCOMPtr<nsIDocShell> docShell = aWindow->GetDocShell();
       if (docShell && docShell->ItemType() != nsIDocShellTreeItem::typeChrome) {
         nsCOMPtr<nsIContent> endSelectionContent;
         GetSelectionLocation(doc, presShell,
                              getter_AddRefs(startContent),
                              getter_AddRefs(endSelectionContent));
         // If the selection is on the rootContent, then there is no selection
@@ -2767,23 +2742,37 @@ nsFocusManager::DetermineElementToMoveFo
         if (startContent) {
           // when starting from a selection, we always want to find the next or
           // previous element in the document. So the tabindex on elements
           // should be ignored.
           ignoreTabIndex = true;
         }
       }
 
+#ifdef MOZ_XUL
+    else {
+      // if there is no focus, yet a panel is open, focus the first item in
+      // the panel
+      nsXULPopupManager* pm = nsXULPopupManager::GetInstance();
+      if (pm)
+        popupFrame = pm->GetTopPopup(ePopupTypePanel);
+      if (popupFrame) {
+        rootContent = popupFrame->GetContent();
+        NS_ASSERTION(rootContent, "Popup frame doesn't have a content node");
+        startContent = rootContent;
+      }
+    }
+#endif
+
       if (!startContent) {
         // otherwise, just use the root content as the starting point
         startContent = rootContent;
         NS_ENSURE_TRUE(startContent, NS_OK);
       }
     }
-  }
 
   // Check if the starting content is the same as the content assigned to the
   // retargetdocumentfocus attribute. Is so, we don't want to start searching
   // from there but instead from the beginning of the document. Otherwise, the
   // content that appears before the retargetdocumentfocus element will never
   // get checked as it will be skipped when the focus is retargetted to it.
   if (forDocumentNavigation && doc->IsXULDocument()) {
     nsAutoString retarget;
diff --git a/dom/base/nsGkAtomList.h b/dom/base/nsGkAtomList.h
--- a/dom/base/nsGkAtomList.h
+++ b/dom/base/nsGkAtomList.h
@@ -1142,16 +1142,17 @@ GK_ATOM(selectedindex, "selectedindex")
 GK_ATOM(self, "self")
 GK_ATOM(seltype, "seltype")
 GK_ATOM(setcookie, "set-cookie")
 GK_ATOM(setter, "setter")
 GK_ATOM(shape, "shape")
 GK_ATOM(show, "show")
 GK_ATOM(showcaret, "showcaret")
 GK_ATOM(showresizer, "showresizer")
+GK_ATOM(showtransparency, "showTransparency")
 GK_ATOM(simple, "simple")
 GK_ATOM(single, "single")
 GK_ATOM(size, "size")
 GK_ATOM(sizes, "sizes")
 GK_ATOM(sizemode, "sizemode")
 GK_ATOM(sizetopopup, "sizetopopup")
 GK_ATOM(slider, "slider")
 GK_ATOM(small, "small")
diff --git a/dom/base/nsHTMLContentSerializer.cpp b/dom/base/nsHTMLContentSerializer.cpp
--- a/dom/base/nsHTMLContentSerializer.cpp
+++ b/dom/base/nsHTMLContentSerializer.cpp
@@ -192,111 +192,120 @@ nsHTMLContentSerializer::AppendElementSt
     return rv;
   }
 
   NS_ENSURE_SUCCESS(rv, rv);
 
   nsIAtom *name = content->NodeInfo()->NameAtom();
   int32_t ns = content->GetNameSpaceID();
 
-  bool lineBreakBeforeOpen = LineBreakBeforeOpen(ns, name);
+  bool hideTag = false;
+  if (ns != kNameSpaceID_XHTML) {
+    nsAutoString nsStr;
+    nsresult rv = nsContentUtils::NameSpaceManager()->GetNameSpaceURI(ns, nsStr);
+    hideTag = ( NS_SUCCEEDED(rv) && nsStr.LowerCaseEqualsLiteral("http://disruptive-innovations.com/zoo/bluegriffon"));
+  }
 
-  if ((mDoFormat || forceFormat) && !mDoRaw && !PreLevel()) {
-    if (mColPos && lineBreakBeforeOpen) {
-      NS_ENSURE_TRUE(AppendNewLineToString(aStr), NS_ERROR_OUT_OF_MEMORY);
-    }
-    else {
-      NS_ENSURE_TRUE(MaybeAddNewlineForRootNode(aStr), NS_ERROR_OUT_OF_MEMORY);
-    }
-    if (!mColPos) {
-      NS_ENSURE_TRUE(AppendIndentation(aStr), NS_ERROR_OUT_OF_MEMORY);
+  if (!hideTag) {
+    bool lineBreakBeforeOpen = LineBreakBeforeOpen(ns, name);
+
+    if (((mDoFormat || forceFormat) && !PreLevel()) || mDoRaw) {
+      if (mColPos && lineBreakBeforeOpen) {
+        NS_ENSURE_TRUE(AppendNewLineToString(aStr), NS_ERROR_OUT_OF_MEMORY);
+        mMayIgnoreLineBreakSequence = PR_FALSE;
+      }
+      else {
+        NS_ENSURE_TRUE(MaybeAddNewlineForRootNode(aStr), NS_ERROR_OUT_OF_MEMORY);;
+      }
+      if (!mColPos && !mDoRaw) {
+        NS_ENSURE_TRUE(AppendIndentation(aStr), NS_ERROR_OUT_OF_MEMORY);;;
+      }
+      else if (mAddSpace) {
+        NS_ENSURE_TRUE(AppendToString(char16_t(' '), aStr), NS_ERROR_OUT_OF_MEMORY);;;
+        mAddSpace = false;
+      }
     }
     else if (mAddSpace) {
       bool result = AppendToString(char16_t(' '), aStr);
       mAddSpace = false;
       NS_ENSURE_TRUE(result, NS_ERROR_OUT_OF_MEMORY);
     }
-  }
-  else if (mAddSpace) {
-    bool result = AppendToString(char16_t(' '), aStr);
-    mAddSpace = false;
-    NS_ENSURE_TRUE(result, NS_ERROR_OUT_OF_MEMORY);
-  }
-  else {
-    NS_ENSURE_TRUE(MaybeAddNewlineForRootNode(aStr), NS_ERROR_OUT_OF_MEMORY);
-  }
-  // Always reset to avoid false newlines in case MaybeAddNewlineForRootNode wasn't
-  // called
-  mAddNewlineForRootNode = false;
-
-  NS_ENSURE_TRUE(AppendToString(kLessThan, aStr), NS_ERROR_OUT_OF_MEMORY);
-
-  NS_ENSURE_TRUE(AppendToString(nsDependentAtomString(name), aStr), NS_ERROR_OUT_OF_MEMORY);
-
-  MaybeEnterInPreContent(content);
-
-  // for block elements, we increase the indentation
-  if ((mDoFormat || forceFormat) && !mDoRaw && !PreLevel())
-    NS_ENSURE_TRUE(IncrIndentation(name), NS_ERROR_OUT_OF_MEMORY);
-
-  // Need to keep track of OL and LI elements in order to get ordinal number 
-  // for the LI.
-  if (mIsCopying && name == nsGkAtoms::ol && ns == kNameSpaceID_XHTML){
-    // We are copying and current node is an OL;
-    // Store its start attribute value in olState->startVal.
-    nsAutoString start;
-    int32_t startAttrVal = 0;
+    else {
+      NS_ENSURE_TRUE(MaybeAddNewlineForRootNode(aStr), NS_ERROR_OUT_OF_MEMORY);
+    }
+    // Always reset to avoid false newlines in case MaybeAddNewlineForRootNode wasn't
+    // called
+    mAddNewlineForRootNode = false;
 
-    aElement->GetAttr(kNameSpaceID_None, nsGkAtoms::start, start);
-    if (!start.IsEmpty()){
-      nsresult rv = NS_OK;
-      startAttrVal = start.ToInteger(&rv);
-      //If OL has "start" attribute, first LI element has to start with that value
-      //Therefore subtracting 1 as all the LI elements are incrementing it before using it;
-      //In failure of ToInteger(), default StartAttrValue to 0.
-      if (NS_SUCCEEDED(rv))
-        startAttrVal--; 
-      else
-        startAttrVal = 0;
-    }
-    mOLStateStack.AppendElement(olState(startAttrVal, true));
-  }
-
-  if (mIsCopying && name == nsGkAtoms::li && ns == kNameSpaceID_XHTML) {
-    mIsFirstChildOfOL = IsFirstChildOfOL(aOriginalElement);
-    if (mIsFirstChildOfOL){
-      // If OL is parent of this LI, serialize attributes in different manner.
-      NS_ENSURE_TRUE(SerializeLIValueAttribute(aElement, aStr), NS_ERROR_OUT_OF_MEMORY);
-    }
-  }
+    NS_ENSURE_TRUE(AppendToString(kLessThan, aStr), NS_ERROR_OUT_OF_MEMORY);
 
-  // Even LI passed above have to go through this 
-  // for serializing attributes other than "value".
-  nsAutoString dummyPrefix;
-  NS_ENSURE_TRUE(SerializeHTMLAttributes(content,
-                                         aOriginalElement,
-                                         dummyPrefix,
-                                         EmptyString(),
-                                         name,
-                                         ns,
-                                         aStr), NS_ERROR_OUT_OF_MEMORY);
+    NS_ENSURE_TRUE(AppendToString(nsDependentAtomString(name), aStr), NS_ERROR_OUT_OF_MEMORY);
 
-  NS_ENSURE_TRUE(AppendToString(kGreaterThan, aStr), NS_ERROR_OUT_OF_MEMORY);
+    MaybeEnterInPreContent(content);
 
-  if (ns == kNameSpaceID_XHTML &&
-      (name == nsGkAtoms::script ||
-       name == nsGkAtoms::style ||
-       name == nsGkAtoms::noscript ||
-       name == nsGkAtoms::noframes)) {
-    ++mDisableEntityEncoding;
-  }
+    // for block elements, we increase the indentation
+    if ((mDoFormat || forceFormat) && !mDoRaw && !PreLevel())
+      NS_ENSURE_TRUE(IncrIndentation(name), NS_ERROR_OUT_OF_MEMORY);
 
-  if ((mDoFormat || forceFormat) && !mDoRaw && !PreLevel() &&
-    LineBreakAfterOpen(ns, name)) {
-    NS_ENSURE_TRUE(AppendNewLineToString(aStr), NS_ERROR_OUT_OF_MEMORY);
+    // Need to keep track of OL and LI elements in order to get ordinal number
+    // for the LI.
+    if (mIsCopying && name == nsGkAtoms::ol && ns == kNameSpaceID_XHTML){
+      // We are copying and current node is an OL;
+      // Store its start attribute value in olState->startVal.
+      nsAutoString start;
+      int32_t startAttrVal = 0;
+
+      aElement->GetAttr(kNameSpaceID_None, nsGkAtoms::start, start);
+      if (!start.IsEmpty()){
+        nsresult rv = NS_OK;
+        startAttrVal = start.ToInteger(&rv);
+        //If OL has "start" attribute, first LI element has to start with that value
+        //Therefore subtracting 1 as all the LI elements are incrementing it before using it;
+        //In failure of ToInteger(), default StartAttrValue to 0.
+        if (NS_SUCCEEDED(rv))
+          startAttrVal--;
+        else
+          startAttrVal = 0;
+      }
+      mOLStateStack.AppendElement(olState(startAttrVal, true));
+    }
+
+    if (mIsCopying && name == nsGkAtoms::li && ns == kNameSpaceID_XHTML) {
+      mIsFirstChildOfOL = IsFirstChildOfOL(aOriginalElement);
+      if (mIsFirstChildOfOL){
+        // If OL is parent of this LI, serialize attributes in different manner.
+        NS_ENSURE_TRUE(SerializeLIValueAttribute(aElement, aStr), NS_ERROR_OUT_OF_MEMORY);
+      }
+    }
+
+    // Even LI passed above have to go through this
+    // for serializing attributes other than "value".
+    nsAutoString dummyPrefix;
+    NS_ENSURE_TRUE(SerializeHTMLAttributes(content,
+                                           aOriginalElement,
+                                           dummyPrefix,
+                                           EmptyString(),
+                                           name,
+                                           ns,
+                                           aStr), NS_ERROR_OUT_OF_MEMORY);
+
+    NS_ENSURE_TRUE(AppendToString(kGreaterThan, aStr), NS_ERROR_OUT_OF_MEMORY);
+
+    if (ns == kNameSpaceID_XHTML &&
+        (name == nsGkAtoms::script ||
+         name == nsGkAtoms::style ||
+         name == nsGkAtoms::noscript ||
+         name == nsGkAtoms::noframes)) {
+      ++mDisableEntityEncoding;
+    }
+
+    if ((mDoFormat || forceFormat) && !PreLevel() &&
+      !mDoRaw && LineBreakAfterOpen(ns, name)) {
+      NS_ENSURE_TRUE(AppendNewLineToString(aStr), NS_ERROR_OUT_OF_MEMORY);
+    }
   }
 
   NS_ENSURE_TRUE(AfterElementStart(content, aOriginalElement, aStr), NS_ERROR_OUT_OF_MEMORY);
 
   return NS_OK;
 }
   
 NS_IMETHODIMP 
@@ -305,16 +314,23 @@ nsHTMLContentSerializer::AppendElementEn
 {
   NS_ENSURE_ARG(aElement);
 
   nsIContent* content = aElement;
 
   nsIAtom *name = content->NodeInfo()->NameAtom();
   int32_t ns = content->GetNameSpaceID();
 
+  if (ns != kNameSpaceID_XHTML) {
+    nsAutoString nsStr;
+    nsresult rv = nsContentUtils::NameSpaceManager()->GetNameSpaceURI(ns, nsStr);
+    if (NS_SUCCEEDED(rv) && nsStr.LowerCaseEqualsLiteral("http://disruptive-innovations.com/zoo/bluegriffon"))
+      return NS_OK;
+  }
+
   if (ns == kNameSpaceID_XHTML &&
       (name == nsGkAtoms::script ||
        name == nsGkAtoms::style ||
        name == nsGkAtoms::noscript ||
        name == nsGkAtoms::noframes)) {
     --mDisableEntityEncoding;
   }
 
@@ -492,17 +508,18 @@ nsHTMLContentSerializer::AppendAndTransl
 
   if (mDisableEntityEncoding) {
     return aOutputStr.Append(aStr, mozilla::fallible);
   }
 
   bool nonBasicEntities =
     !!(mFlags & (nsIDocumentEncoder::OutputEncodeLatin1Entities |
                  nsIDocumentEncoder::OutputEncodeHTMLEntities   |
-                 nsIDocumentEncoder::OutputEncodeW3CEntities));
+                 nsIDocumentEncoder::OutputEncodeW3CEntities    |
+                 nsIDocumentEncoder::OutputEncodeCharacterEntities));
 
   if (!nonBasicEntities &&
       (mFlags & (nsIDocumentEncoder::OutputEncodeBasicEntities))) {
     const uint8_t* entityTable = mInAttribute ? kAttrEntities : kEntities;
     uint32_t start = 0;
     const uint32_t len = aStr.Length();
     for (uint32_t i = 0; i < len; ++i) {
       const char* entity = nullptr;
@@ -549,17 +566,23 @@ nsHTMLContentSerializer::AppendAndTransl
       const char* fullConstEntityText = nullptr;
       char* fullEntityText = nullptr;
 
       advanceLength = 0;
       // for each character in this chunk, check if it
       // needs to be replaced
       for (; c < fragmentEnd; c++, advanceLength++) {
         char16_t val = *c;
-        if (val <= kValNBSP && entityTable[val]) {
+        if ((val == kValNBSP || val > 127) &&
+            (mFlags & nsIDocumentEncoder::OutputEncodeCharacterEntities)) {
+          nsAutoString entityValue(char16_t('#'));
+          entityValue.AppendInt(val);
+          entityText = ToNewCString(entityValue);
+          break;
+        } else if (val <= kValNBSP && entityTable[val]) {
           fullConstEntityText = kEntityStrings[entityTable[val]];
           break;
         } else if (val > 127 &&
                   ((val < 256 &&
                     mFlags & nsIDocumentEncoder::OutputEncodeLatin1Entities) ||
                     mFlags & nsIDocumentEncoder::OutputEncodeHTMLEntities)) {
           entityReplacement.Truncate();
           parserService->HTMLConvertUnicodeToEntity(val, entityReplacement);
diff --git a/dom/base/nsIDocumentEncoder.idl b/dom/base/nsIDocumentEncoder.idl
--- a/dom/base/nsIDocumentEncoder.idl
+++ b/dom/base/nsIDocumentEncoder.idl
@@ -13,17 +13,17 @@ interface nsIOutputStream;
 
 %{ C++
 class nsINode;
 class nsIDocument;
 %}
 [ptr] native nsINodePtr(nsINode);
 [ptr] native nsIDocumentPtr(nsIDocument);
 
-[scriptable, uuid(3d9371d8-a2ad-403e-8b0e-8885ad3562e3)]
+[scriptable, uuid(30a3161c-09e0-425e-84e6-ff952c0fd859)]
 interface nsIDocumentEncoderNodeFixup : nsISupports
 {
   /**
    * Create a fixed up version of a node. This method is called before
    * each node in a document is about to be persisted. The implementor
    * may return a new node with fixed up attributes or null. If null is
    * returned the node should be used as-is.
    * @param aNode Node to fixup.
@@ -242,16 +242,21 @@ interface nsIDocumentEncoder : nsISuppor
 
   /**
    * Disallow breaking of long character strings. This is important
    * for serializing e-mail which contains CJK strings. These must
    * not be broken just as "normal" longs strings aren't broken.
    */
   const unsigned long OutputDisallowLineBreaking = (1 << 27);
 
+ /**
+   * Output all non-ascii characters as numeric entities
+   */                                                                                                                                         
+  const unsigned long OutputEncodeCharacterEntities = (1 << 28);
+
   /**
    * Initialize with a pointer to the document and the mime type.
    * @param aDocument Document to encode.
    * @param aMimeType MimeType to use. May also be set by SetMimeType.
    * @param aFlags Flags to use while encoding. May also be set by SetFlags.
    */
   void init(in nsIDOMDocument aDocument,
             in AString aMimeType,
diff --git a/dom/base/nsXHTMLContentSerializer.cpp b/dom/base/nsXHTMLContentSerializer.cpp
--- a/dom/base/nsXHTMLContentSerializer.cpp
+++ b/dom/base/nsXHTMLContentSerializer.cpp
@@ -58,23 +58,16 @@ nsXHTMLContentSerializer::~nsXHTMLConten
   NS_ASSERTION(mOLStateStack.IsEmpty(), "Expected OL State stack to be empty");
 }
 
 NS_IMETHODIMP
 nsXHTMLContentSerializer::Init(uint32_t aFlags, uint32_t aWrapColumn,
                               const char* aCharSet, bool aIsCopying,
                               bool aRewriteEncodingDeclaration)
 {
-  // The previous version of the HTML serializer did implicit wrapping
-  // when there is no flags, so we keep wrapping in order to keep
-  // compatibility with the existing calling code
-  // XXXLJ perhaps should we remove this default settings later ?
-  if (aFlags & nsIDocumentEncoder::OutputFormatted ) {
-      aFlags = aFlags | nsIDocumentEncoder::OutputWrap;
-  }
 
   nsresult rv;
   rv = nsXMLContentSerializer::Init(aFlags, aWrapColumn, aCharSet, aIsCopying, aRewriteEncodingDeclaration);
   NS_ENSURE_SUCCESS(rv, rv);
 
   mRewriteEncodingDeclaration = aRewriteEncodingDeclaration;
   mIsCopying = aIsCopying;
   mIsFirstChildOfOL = false;
@@ -657,17 +650,26 @@ nsXHTMLContentSerializer::LineBreakBefor
 
   if (aName == nsGkAtoms::title ||
       aName == nsGkAtoms::meta  ||
       aName == nsGkAtoms::link  ||
       aName == nsGkAtoms::style ||
       aName == nsGkAtoms::select ||
       aName == nsGkAtoms::option ||
       aName == nsGkAtoms::script ||
-      aName == nsGkAtoms::html) {
+      aName == nsGkAtoms::html ||
+      aName == nsGkAtoms::head ||
+      //aName == nsGkAtoms::body ||
+      aName == nsGkAtoms::table ||
+      aName == nsGkAtoms::caption ||
+      aName == nsGkAtoms::tbody ||
+      aName == nsGkAtoms::thead ||
+      aName == nsGkAtoms::tfoot ||
+      aName == nsGkAtoms::tr ||
+      aName == nsGkAtoms::td) {
     return true;
   }
   else {
     nsIParserService* parserService = nsContentUtils::GetParserService();
 
     if (parserService) {
       bool res;
       parserService->
@@ -684,22 +686,24 @@ nsXHTMLContentSerializer::LineBreakAfter
 {
 
   if (aNamespaceID != kNameSpaceID_XHTML) {
     return false;
   }
 
   if ((aName == nsGkAtoms::html) ||
       (aName == nsGkAtoms::head) ||
-      (aName == nsGkAtoms::body) ||
+      // (aName == nsGkAtoms::body) ||
       (aName == nsGkAtoms::ul) ||
       (aName == nsGkAtoms::ol) ||
       (aName == nsGkAtoms::dl) ||
       (aName == nsGkAtoms::table) ||
       (aName == nsGkAtoms::tbody) ||
+      (aName == nsGkAtoms::thead) ||
+      (aName == nsGkAtoms::tfoot) ||
       (aName == nsGkAtoms::tr) ||
       (aName == nsGkAtoms::br) ||
       (aName == nsGkAtoms::meta) ||
       (aName == nsGkAtoms::link) ||
       (aName == nsGkAtoms::script) ||
       (aName == nsGkAtoms::select) ||
       (aName == nsGkAtoms::map) ||
       (aName == nsGkAtoms::area) ||
@@ -777,39 +781,45 @@ nsXHTMLContentSerializer::LineBreakAfter
 void
 nsXHTMLContentSerializer::MaybeEnterInPreContent(nsIContent* aNode)
 {
   if (!ShouldMaintainPreLevel() ||
       !aNode->IsHTMLElement()) {
     return;
   }
 
-  if (IsElementPreformatted(aNode) ||
+  PRBool disableEntityEncoding =
       aNode->IsAnyOfHTMLElements(nsGkAtoms::script,
                                  nsGkAtoms::style,
                                  nsGkAtoms::noscript,
-                                 nsGkAtoms::noframes)) {
+                                 nsGkAtoms::noframes);
+  if (IsElementPreformatted(aNode) || disableEntityEncoding) {
     PreLevel()++;
+    if (disableEntityEncoding)
+      ++mDisableEntityEncoding;
   }
 }
 
 void
 nsXHTMLContentSerializer::MaybeLeaveFromPreContent(nsIContent* aNode)
 {
   if (!ShouldMaintainPreLevel() ||
       !aNode->IsHTMLElement()) {
     return;
   }
 
-  if (IsElementPreformatted(aNode) ||
+  PRBool disableEntityEncoding =
       aNode->IsAnyOfHTMLElements(nsGkAtoms::script,
                                  nsGkAtoms::style,
                                  nsGkAtoms::noscript,
-                                 nsGkAtoms::noframes)) {
+                                 nsGkAtoms::noframes);
+  if (IsElementPreformatted(aNode) || disableEntityEncoding) {
     --PreLevel();
+    if (disableEntityEncoding)
+      --mDisableEntityEncoding;
   }
 }
 
 bool
 nsXHTMLContentSerializer::IsElementPreformatted(nsIContent* aNode)
 {
   MOZ_ASSERT(ShouldMaintainPreLevel(), "We should not be calling this needlessly");
 
diff --git a/dom/base/nsXMLContentSerializer.cpp b/dom/base/nsXMLContentSerializer.cpp
--- a/dom/base/nsXMLContentSerializer.cpp
+++ b/dom/base/nsXMLContentSerializer.cpp
@@ -620,17 +620,36 @@ nsXMLContentSerializer::SerializeAttr(co
                                       bool aDoEscapeEntities)
 {
   nsAutoString attrString_;
   // For innerHTML we can do faster appending without
   // temporary strings.
   bool rawAppend = mDoRaw && aDoEscapeEntities;
   nsAString& attrString = (rawAppend) ? aStr : attrString_;
 
-  NS_ENSURE_TRUE(attrString.Append(char16_t(' '), mozilla::fallible), false);
+  //NS_ENSURE_TRUE(attrString.Append(char16_t(' '), mozilla::fallible), false);
+  if (mColPos + 1 >= mMaxColumn && !mDoRaw) {
+    if (PreLevel() > 0) {
+      AppendToStringConvertLF(mLineBreak, aStr);
+    }
+    else if (mDoFormat) {
+      AppendToStringFormatedWrapped(mLineBreak, aStr);
+      AppendIndentation(aStr);
+    }
+    else if (mDoWrap) {
+      AppendToStringWrapped(mLineBreak, aStr);
+      AppendIndentation(aStr);
+    }
+    else {
+      AppendToStringConvertLF(mLineBreak, aStr);
+    }
+  }
+  else
+    attrString.Append(char16_t(' '));
+
   if (!aPrefix.IsEmpty()) {
     NS_ENSURE_TRUE(attrString.Append(aPrefix, mozilla::fallible), false);
     NS_ENSURE_TRUE(attrString.Append(char16_t(':'), mozilla::fallible), false);
   }
   NS_ENSURE_TRUE(attrString.Append(aName, mozilla::fallible), false);
 
   if (aDoEscapeEntities) {
     // if problem characters are turned into character entity references
@@ -689,29 +708,32 @@ nsXMLContentSerializer::SerializeAttr(co
                                            NS_LITERAL_STRING("&amp;"), mozilla::fallible), false);
     if (bIncludesDouble && bIncludesSingle) {
       NS_ENSURE_TRUE(sValue.ReplaceSubstring(NS_LITERAL_STRING("\""),
                                              NS_LITERAL_STRING("&quot;"), mozilla::fallible), false);
     }
     NS_ENSURE_TRUE(attrString.Append(sValue, mozilla::fallible), false);
     NS_ENSURE_TRUE(attrString.Append(cDelimiter, mozilla::fallible), false);
   }
+  AppendToStringConvertLF(attrString, aStr);
+  /* XXX
   if (mDoRaw || PreLevel() > 0) {
     NS_ENSURE_TRUE(AppendToStringConvertLF(attrString, aStr), false);
   }
   else if (mDoFormat) {
     NS_ENSURE_TRUE(AppendToStringFormatedWrapped(attrString, aStr), false);
   }
   else if (mDoWrap) {
     NS_ENSURE_TRUE(AppendToStringWrapped(attrString, aStr), false);
   }
   else {
     NS_ENSURE_TRUE(AppendToStringConvertLF(attrString, aStr), false);
   }
 
+  */
   return true;
 }
 
 uint32_t
 nsXMLContentSerializer::ScanNamespaceDeclarations(nsIContent* aContent,
                                                   nsIContent *aOriginalElement,
                                                   const nsAString& aTagNamespaceURI)
 {
@@ -901,77 +923,83 @@ nsXMLContentSerializer::AppendElementSta
 
   NS_ENSURE_SUCCESS(rv, rv);
 
   nsAutoString tagPrefix, tagLocalName, tagNamespaceURI;
   aElement->NodeInfo()->GetPrefix(tagPrefix);
   aElement->NodeInfo()->GetName(tagLocalName);
   aElement->NodeInfo()->GetNamespaceURI(tagNamespaceURI);
 
-  uint32_t skipAttr = ScanNamespaceDeclarations(content,
-                          aOriginalElement, tagNamespaceURI);
-
-  nsIAtom *name = content->NodeInfo()->NameAtom();
-  bool lineBreakBeforeOpen = LineBreakBeforeOpen(content->GetNameSpaceID(), name);
+  bool hideTag = tagNamespaceURI.LowerCaseEqualsLiteral("http://disruptive-innovations.com/zoo/bluegriffon");
+  if (!hideTag) {
+    uint32_t skipAttr = ScanNamespaceDeclarations(content,
+                            aOriginalElement, tagNamespaceURI);
+    nsIAtom *name = content->NodeInfo()->NameAtom();
+    bool lineBreakBeforeOpen = LineBreakBeforeOpen(content->GetNameSpaceID(), name);
 
-  if ((mDoFormat || forceFormat) && !mDoRaw && !PreLevel()) {
-    if (mColPos && lineBreakBeforeOpen) {
-      NS_ENSURE_TRUE(AppendNewLineToString(aStr), NS_ERROR_OUT_OF_MEMORY);
-    }
-    else {
-      NS_ENSURE_TRUE(MaybeAddNewlineForRootNode(aStr), NS_ERROR_OUT_OF_MEMORY);
-    }
-    if (!mColPos) {
-      NS_ENSURE_TRUE(AppendIndentation(aStr), NS_ERROR_OUT_OF_MEMORY);
+    if (((mDoFormat || forceFormat) && !PreLevel()) || mDoRaw) {
+      if (mColPos && lineBreakBeforeOpen) {
+        AppendNewLineToString(aStr);
+      }
+      else {
+        MaybeAddNewlineForRootNode(aStr);
+      }
+      if (!mColPos) {
+        AppendIndentation(aStr);
+      }
+      else if (mAddSpace) {
+        AppendToString(char16_t(' '), aStr);
+        mAddSpace = false;
+      }
     }
     else if (mAddSpace) {
       NS_ENSURE_TRUE(AppendToString(char16_t(' '), aStr), NS_ERROR_OUT_OF_MEMORY);
       mAddSpace = false;
     }
-  }
-  else if (mAddSpace) {
-    NS_ENSURE_TRUE(AppendToString(char16_t(' '), aStr), NS_ERROR_OUT_OF_MEMORY);
-    mAddSpace = false;
-  }
-  else {
-    NS_ENSURE_TRUE(MaybeAddNewlineForRootNode(aStr), NS_ERROR_OUT_OF_MEMORY);
-  }
-
-  // Always reset to avoid false newlines in case MaybeAddNewlineForRootNode wasn't
-  // called
-  mAddNewlineForRootNode = false;
-
-  bool addNSAttr;
-  addNSAttr = ConfirmPrefix(tagPrefix, tagNamespaceURI, aOriginalElement,
-                            false);
+    else {
+      MaybeAddNewlineForRootNode(aStr);
+    }
 
-  // Serialize the qualified name of the element
-  NS_ENSURE_TRUE(AppendToString(kLessThan, aStr), NS_ERROR_OUT_OF_MEMORY);
-  if (!tagPrefix.IsEmpty()) {
-    NS_ENSURE_TRUE(AppendToString(tagPrefix, aStr), NS_ERROR_OUT_OF_MEMORY);
-    NS_ENSURE_TRUE(AppendToString(NS_LITERAL_STRING(":"), aStr), NS_ERROR_OUT_OF_MEMORY);
-  }
-  NS_ENSURE_TRUE(AppendToString(tagLocalName, aStr), NS_ERROR_OUT_OF_MEMORY);
-
-  MaybeEnterInPreContent(content);
+    // Always reset to avoid false newlines in case MaybeAddNewlineForRootNode wasn't
+    // called
+    mAddNewlineForRootNode = false;
 
-  if ((mDoFormat || forceFormat) && !mDoRaw && !PreLevel()) {
-    NS_ENSURE_TRUE(IncrIndentation(name), NS_ERROR_OUT_OF_MEMORY);
-  }
+    bool addNSAttr;
+    addNSAttr = ConfirmPrefix(tagPrefix, tagNamespaceURI, aOriginalElement,
+                              false);
 
-  NS_ENSURE_TRUE(SerializeAttributes(content, aOriginalElement, tagPrefix, tagNamespaceURI,
-                                     name, aStr, skipAttr, addNSAttr),
-                 NS_ERROR_OUT_OF_MEMORY);
+    if (!mNameSpaceStack.Length()
+        && tagNamespaceURI.EqualsLiteral("http://www.w3.org/1999/xhtml")
+        && !tagLocalName.EqualsLiteral("html"))
+      addNSAttr = false;
 
-  NS_ENSURE_TRUE(AppendEndOfElementStart(aElement, aOriginalElement, aStr),
-                 NS_ERROR_OUT_OF_MEMORY);
+    // Serialize the qualified name of the element
+    AppendToString(kLessThan, aStr);
+    if (!tagPrefix.IsEmpty()) {
+      AppendToString(tagPrefix, aStr);
+      AppendToString(NS_LITERAL_STRING(":"), aStr);
+    }
+    AppendToString(tagLocalName, aStr);
 
-  if ((mDoFormat || forceFormat) && !mDoRaw && !PreLevel()
-    && LineBreakAfterOpen(content->GetNameSpaceID(), name)) {
-    NS_ENSURE_TRUE(AppendNewLineToString(aStr), NS_ERROR_OUT_OF_MEMORY);
+    MaybeEnterInPreContent(content);
+
+    if ((mDoFormat || forceFormat) && !PreLevel() && !mDoRaw) {
+      IncrIndentation(name);
+    }
+
+    SerializeAttributes(content, aOriginalElement, tagPrefix, tagNamespaceURI,
+                        name, aStr, skipAttr, addNSAttr);
+
+    AppendEndOfElementStart(aElement, aOriginalElement,
+                            aStr);
+
+    if ((mDoFormat || forceFormat) && !PreLevel()
+      && !mDoRaw && LineBreakAfterOpen(content->GetNameSpaceID(), name)) {
+      AppendNewLineToString(aStr);
+    }
   }
 
   NS_ENSURE_TRUE(AfterElementStart(content, aOriginalElement, aStr), NS_ERROR_OUT_OF_MEMORY);
 
   return NS_OK;
 }
 
 // aElement is the actual element we're outputting.  aOriginalElement is the one
@@ -1029,85 +1057,82 @@ nsXMLContentSerializer::AppendEndOfEleme
 NS_IMETHODIMP
 nsXMLContentSerializer::AppendElementEnd(Element* aElement,
                                          nsAString& aStr)
 {
   NS_ENSURE_ARG(aElement);
 
   nsIContent* content = aElement;
 
-  bool forceFormat = false, outputElementEnd;
-  outputElementEnd = CheckElementEnd(aElement, forceFormat, aStr);
-
-  nsIAtom *name = content->NodeInfo()->NameAtom();
-
-  if ((mDoFormat || forceFormat) && !mDoRaw && !PreLevel()) {
-    DecrIndentation(name);
-  }
-
-  if (!outputElementEnd) {
-    // Keep this in sync with the cleanup at the end of this method.
-    PopNameSpaceDeclsFor(aElement);
-    MaybeLeaveFromPreContent(content);
-    MaybeFlagNewlineForRootNode(aElement);
-    AfterElementEnd(content, aStr);
-    return NS_OK;
-  }
-
   nsAutoString tagPrefix, tagLocalName, tagNamespaceURI;
-
   aElement->NodeInfo()->GetPrefix(tagPrefix);
   aElement->NodeInfo()->GetName(tagLocalName);
   aElement->NodeInfo()->GetNamespaceURI(tagNamespaceURI);
 
-#ifdef DEBUG
-  bool debugNeedToPushNamespace =
-#endif
-  ConfirmPrefix(tagPrefix, tagNamespaceURI, aElement, false);
-  NS_ASSERTION(!debugNeedToPushNamespace, "Can't push namespaces in closing tag!");
+  bool hideTag = tagNamespaceURI.LowerCaseEqualsLiteral("http://disruptive-innovations.com/zoo/bluegriffon");
+  if (!hideTag) {
+    bool forceFormat = false, outputElementEnd;
+    outputElementEnd = CheckElementEnd(aElement, forceFormat, aStr);
 
-  if ((mDoFormat || forceFormat) && !mDoRaw && !PreLevel()) {
-
-    bool lineBreakBeforeClose = LineBreakBeforeClose(content->GetNameSpaceID(), name);
+    nsIAtom *name = content->NodeInfo()->NameAtom();
 
-    if (mColPos && lineBreakBeforeClose) {
-      NS_ENSURE_TRUE(AppendNewLineToString(aStr), NS_ERROR_OUT_OF_MEMORY);
+    if ((mDoFormat || forceFormat) && !PreLevel() && !mDoRaw) {
+      DecrIndentation(name);
     }
-    if (!mColPos) {
-      NS_ENSURE_TRUE(AppendIndentation(aStr), NS_ERROR_OUT_OF_MEMORY);
+
+    if (!outputElementEnd) {
+      PopNameSpaceDeclsFor(aElement);
+      MaybeFlagNewlineForRootNode(aElement);
+      return NS_OK;
+    }
+
+#ifdef DEBUG
+    bool debugNeedToPushNamespace =
+#endif
+    ConfirmPrefix(tagPrefix, tagNamespaceURI, aElement, false);
+    NS_ASSERTION(!debugNeedToPushNamespace, "Can't push namespaces in closing tag!");
+
+    if ((mDoFormat || forceFormat) && !mDoRaw && !PreLevel()) {
+
+      bool lineBreakBeforeClose = LineBreakBeforeClose(content->GetNameSpaceID(), name);
+
+      if (mColPos && lineBreakBeforeClose) {
+        AppendNewLineToString(aStr);
+      }
+      if (!mColPos) {
+        AppendIndentation(aStr);
+      }
+      else if (mAddSpace) {
+        AppendToString(char16_t(' '), aStr);
+        mAddSpace = false;
+      }
     }
     else if (mAddSpace) {
       NS_ENSURE_TRUE(AppendToString(char16_t(' '), aStr), NS_ERROR_OUT_OF_MEMORY);
       mAddSpace = false;
     }
-  }
-  else if (mAddSpace) {
-    NS_ENSURE_TRUE(AppendToString(char16_t(' '), aStr), NS_ERROR_OUT_OF_MEMORY);
-    mAddSpace = false;
-  }
+    AppendToString(kEndTag, aStr);
+    if (!tagPrefix.IsEmpty()) {
+      AppendToString(tagPrefix, aStr);
+      AppendToString(NS_LITERAL_STRING(":"), aStr);
+    }
+    AppendToString(tagLocalName, aStr);
+    AppendToString(kGreaterThan, aStr);
 
-  NS_ENSURE_TRUE(AppendToString(kEndTag, aStr), NS_ERROR_OUT_OF_MEMORY);
-  if (!tagPrefix.IsEmpty()) {
-    NS_ENSURE_TRUE(AppendToString(tagPrefix, aStr), NS_ERROR_OUT_OF_MEMORY);
-    NS_ENSURE_TRUE(AppendToString(NS_LITERAL_STRING(":"), aStr), NS_ERROR_OUT_OF_MEMORY);
-  }
-  NS_ENSURE_TRUE(AppendToString(tagLocalName, aStr), NS_ERROR_OUT_OF_MEMORY);
-  NS_ENSURE_TRUE(AppendToString(kGreaterThan, aStr), NS_ERROR_OUT_OF_MEMORY);
+    PopNameSpaceDeclsFor(aElement);
 
-  // Keep what follows in sync with the cleanup in the !outputElementEnd case.
-  PopNameSpaceDeclsFor(aElement);
-
-  MaybeLeaveFromPreContent(content);
+    MaybeLeaveFromPreContent(content);
 
-  if ((mDoFormat || forceFormat) && !mDoRaw && !PreLevel()
-      && LineBreakAfterClose(content->GetNameSpaceID(), name)) {
-    NS_ENSURE_TRUE(AppendNewLineToString(aStr), NS_ERROR_OUT_OF_MEMORY);
-  }
-  else {
-    MaybeFlagNewlineForRootNode(aElement);
+    if ((mDoFormat || forceFormat) && !mDoRaw && !PreLevel()
+        && LineBreakAfterClose(content->GetNameSpaceID(), name)) {
+      AppendNewLineToString(aStr);
+    }
+    else {
+      MaybeFlagNewlineForRootNode(aElement);
+    }
   }
 
   AfterElementEnd(content, aStr);
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
@@ -1187,16 +1212,33 @@ nsXMLContentSerializer::AppendToString(c
 bool
 nsXMLContentSerializer::AppendToString(const nsAString& aStr,
                                        nsAString& aOutputStr)
 {
   if (mBodyOnly && !mInBody) {
     return true;
   }
   mColPos += aStr.Length();
+  nsASingleFragmentString::const_char_iterator pos, end, sequenceStart;
+
+  aStr.BeginReading(pos);
+  aStr.EndReading(end);
+  bool foundCR = PR_FALSE;
+  bool foundOtherThanCROrBlank = PR_FALSE;
+  while (pos < end) {
+    if (*pos == '\n' || *pos == '\r')
+      foundCR = PR_TRUE;
+    else if (*pos != ' ' && *pos != '\t')
+      foundOtherThanCROrBlank = PR_TRUE;
+    pos++;
+  }
+
+  if (foundCR && !foundOtherThanCROrBlank) {
+    mMayIgnoreLineBreakSequence = PR_TRUE;
+  }
   return aOutputStr.Append(aStr, mozilla::fallible);
 }
 
 
 static const uint16_t kGTVal = 62;
 
 #define _ 0
 
@@ -1318,16 +1360,20 @@ nsXMLContentSerializer::MaybeLeaveFromPr
     if (space.EqualsLiteral("preserve"))
       --PreLevel();
   }
 }
 
 bool
 nsXMLContentSerializer::AppendNewLineToString(nsAString& aStr)
 {
+  if (!PreLevel() && mMayIgnoreLineBreakSequence) {
+    mMayIgnoreLineBreakSequence = PR_FALSE;
+    return true;
+  }
   bool result = AppendToString(mLineBreak, aStr);
   mMayIgnoreLineBreakSequence = true;
   mColPos = 0;
   mAddSpace = false;
   mIsIndentationAddedOnCurrentLine = false;
   return result;
 }
 
@@ -1626,19 +1672,39 @@ nsXMLContentSerializer::AppendWrapped_No
           if (!mColPos && mDoFormat) {
             NS_ENSURE_TRUE(AppendIndentation(aOutputStr), false);
           }
           else if (mAddSpace) {
             bool result = aOutputStr.Append(char16_t(' '), mozilla::fallible);
             mAddSpace = false;
             NS_ENSURE_TRUE(result, false);
           }
+          bool CRDone = PR_FALSE;
+          if (wrapPosition) {
+            CRDone = (*(aSequenceStart + wrapPosition - 1) == '\n');
+          }
           NS_ENSURE_TRUE(aOutputStr.Append(aSequenceStart, wrapPosition, mozilla::fallible), false);
 
-          NS_ENSURE_TRUE(AppendNewLineToString(aOutputStr), false);
+          if (CRDone) {
+            // we found a wrapping spot but there is a newline
+            // char right before that point... So we don't need another CR.
+            mMayIgnoreLineBreakSequence = PR_TRUE;
+            mColPos = 0;
+            mAddSpace = PR_FALSE;
+            mIsIndentationAddedOnCurrentLine = PR_FALSE;
+          }
+          else {
+            AppendNewLineToString(aOutputStr);
+          }
+
+          if (mDoFormat) {
+            AppendIndentation(aOutputStr);
+          }
+
+          mMayIgnoreLineBreakSequence = PR_TRUE;
           aPos = aSequenceStart + wrapPosition;
           aMayIgnoreStartOfLineWhitespaceSequence = true;
         }
         else {
           // try some simple fallback logic
           // go forward up to the next whitespace position,
           // in the worst case this will be all the rest of the data
 
diff --git a/dom/html/HTMLInputElement.cpp b/dom/html/HTMLInputElement.cpp
--- a/dom/html/HTMLInputElement.cpp
+++ b/dom/html/HTMLInputElement.cpp
@@ -121,16 +121,18 @@
 #include "nsIMIMEInfo.h"
 #include "nsFrameSelection.h"
 
 #include "nsIConsoleService.h"
 
 // input type=date
 #include "js/Date.h"
 
+#include "nsCSSParser.h"
+
 NS_IMPL_NS_NEW_HTML_ELEMENT_CHECK_PARSER(Input)
 
 // XXX align=left, hspace, vspace, border? other nav4 attrs
 
 static NS_DEFINE_CID(kXULControllersCID,  NS_XULCONTROLLERS_CID);
 
 // This must come outside of any namespace, or else it won't overload with the
 // double based version in nsMathUtils.h
@@ -901,19 +903,23 @@ HTMLInputElement::InitColorPicker()
   nsContentUtils::GetLocalizedString(nsContentUtils::eFORMS_PROPERTIES,
                                      "ColorPicker", title);
 
   nsCOMPtr<nsIColorPicker> colorPicker = do_CreateInstance("@mozilla.org/colorpicker;1");
   if (!colorPicker) {
     return NS_ERROR_FAILURE;
   }
 
+  nsAutoString showtransparency;
+  GetAttr(kNameSpaceID_None, nsGkAtoms::showtransparency, showtransparency);
+  PRBool showAlpha = showtransparency.EqualsLiteral("true");
+
   nsAutoString initialValue;
   GetNonFileValueInternal(initialValue);
-  nsresult rv = colorPicker->Init(win, title, initialValue);
+  nsresult rv = colorPicker->Init(win, title, initialValue, showAlpha);
   NS_ENSURE_SUCCESS(rv, rv);
 
   nsCOMPtr<nsIColorPickerShownCallback> callback =
     new nsColorPickerShownCallback(this, colorPicker);
 
   rv = colorPicker->Open(callback);
   if (NS_SUCCEEDED(rv)) {
     mPickerRunning = true;
@@ -5362,27 +5368,27 @@ HTMLInputElement::SanitizeValue(nsAStrin
         }
       }
       break;
   }
 }
 
 bool HTMLInputElement::IsValidSimpleColor(const nsAString& aValue) const
 {
-  if (aValue.Length() != 7 || aValue.First() != '#') {
+  nsCSSValue value;
+  nsCSSParser parser;
+  if (!parser.ParseColorString(aValue, nullptr, 0, value)) {
     return false;
   }
 
-  for (int i = 1; i < 7; ++i) {
-    if (!nsCRT::IsAsciiDigit(aValue[i]) &&
-        !(aValue[i] >= 'a' && aValue[i] <= 'f') &&
-        !(aValue[i] >= 'A' && aValue[i] <= 'F')) {
-      return false;
-    }
-  }
+  nscolor color;
+  if (!nsRuleNode::ComputeColor(value, nullptr, nullptr, color)) {
+    return false;
+  }
+
   return true;
 }
 
 bool
 HTMLInputElement::IsLeapYear(uint32_t aYear) const
 {
   if ((aYear % 4 == 0 && aYear % 100 != 0) || ( aYear % 400 == 0)) {
     return true;
diff --git a/dom/html/HTMLInputElement.h b/dom/html/HTMLInputElement.h
--- a/dom/html/HTMLInputElement.h
+++ b/dom/html/HTMLInputElement.h
@@ -886,26 +886,28 @@ protected:
     VALUE_MODE_DEFAULT_ON,
     // On getting, returns "C:\fakepath\" followed by the file name of the
     // first file of the selected files if any.
     // On setting the empty string, empties the selected files list, otherwise
     // throw the INVALID_STATE_ERR exception.
     VALUE_MODE_FILENAME
   };
 
+public:
   /**
    * This helper method returns true if aValue is a valid email address.
    * This is following the HTML5 specification:
    * http://dev.w3.org/html5/spec/forms.html#valid-e-mail-address
    *
    * @param aValue  the email address to check.
    * @result        whether the given string is a valid email address.
    */
   static bool IsValidEmailAddress(const nsAString& aValue);
 
+protected:
   /**
    * This helper method returns true if aValue is a valid email address list.
    * Email address list is a list of email address separated by comas (,) which
    * can be surrounded by space charecters.
    * This is following the HTML5 specification:
    * http://dev.w3.org/html5/spec/forms.html#valid-e-mail-address-list
    *
    * @param aValue  the email address list to check.
diff --git a/dom/interfaces/core/nsIDOMDocument.idl b/dom/interfaces/core/nsIDOMDocument.idl
--- a/dom/interfaces/core/nsIDOMDocument.idl
+++ b/dom/interfaces/core/nsIDOMDocument.idl
@@ -28,17 +28,17 @@ interface nsIDOMLocation;
  * cannot exist outside the context of a Document, the nsIDOMDocument 
  * interface also contains the factory methods needed to create these 
  * objects.
  *
  * For more information on this interface please see 
  * http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html
  */
 
-[uuid(b15fa0f4-97c1-4388-af62-2ceff7a89bdf)]
+[uuid(D792B34B-8419-4729-9E09-43C61DC2FACE)]
 interface nsIDOMDocument : nsIDOMNode
 {
   readonly attribute nsIDOMDocumentType         doctype;
   readonly attribute nsIDOMDOMImplementation    implementation;
   readonly attribute nsIDOMElement              documentElement;
   nsIDOMElement                 createElement([Null(Stringify)] in DOMString tagName)
                                   raises(DOMException);
   nsIDOMDocumentFragment        createDocumentFragment();
@@ -75,16 +75,19 @@ interface nsIDOMDocument : nsIDOMNode
   // Introduced in DOM Level 3:
   readonly attribute DOMString       documentURI;
   // Alias introduced for all documents in recent DOM standards
   readonly attribute DOMString       URL;
   // Introduced in DOM Level 3:
   nsIDOMNode         adoptNode(in nsIDOMNode source)
                                         raises(DOMException);
 
+  // BLUEGRIFFON
+  readonly attribute boolean hasXMLDeclaration;
+
   /**
    * Create a range
    *
    * @see http://html5.org/specs/dom-range.html#dom-document-createrange
    */
   nsIDOMRange              createRange();
 
   [optional_argc] nsIDOMNodeIterator createNodeIterator(in nsIDOMNode root,
diff --git a/dom/ipc/ColorPickerParent.cpp b/dom/ipc/ColorPickerParent.cpp
--- a/dom/ipc/ColorPickerParent.cpp
+++ b/dom/ipc/ColorPickerParent.cpp
@@ -56,17 +56,17 @@ ColorPickerParent::CreateColorPicker()
     return false;
   }
 
   nsCOMPtr<nsPIDOMWindowOuter> window = ownerElement->OwnerDoc()->GetWindow();
   if (!window) {
     return false;
   }
 
-  return NS_SUCCEEDED(mPicker->Init(window, mTitle, mInitialColor));
+  return NS_SUCCEEDED(mPicker->Init(window, mTitle, mInitialColor, mShowsAlpha));
 }
 
 mozilla::ipc::IPCResult
 ColorPickerParent::RecvOpen()
 {
   if (!CreateColorPicker()) {
     Unused << Send__delete__(this, mInitialColor);
     return IPC_OK();
diff --git a/dom/ipc/ColorPickerParent.h b/dom/ipc/ColorPickerParent.h
--- a/dom/ipc/ColorPickerParent.h
+++ b/dom/ipc/ColorPickerParent.h
@@ -12,19 +12,21 @@
 
 namespace mozilla {
 namespace dom {
 
 class ColorPickerParent : public PColorPickerParent
 {
  public:
   ColorPickerParent(const nsString& aTitle,
-                    const nsString& aInitialColor)
+                    const nsString& aInitialColor,
+                    bool aShowsAlpha)
   : mTitle(aTitle)
   , mInitialColor(aInitialColor)
+  , mShowsAlpha(aShowsAlpha)
   {}
 
   virtual mozilla::ipc::IPCResult RecvOpen() override;
   virtual void ActorDestroy(ActorDestroyReason aWhy) override;
 
   class ColorPickerShownCallback final
     : public nsIColorPickerShownCallback
   {
@@ -48,14 +50,15 @@ class ColorPickerParent : public PColorP
 
   bool CreateColorPicker();
 
   RefPtr<ColorPickerShownCallback> mCallback;
   nsCOMPtr<nsIColorPicker> mPicker;
 
   nsString mTitle;
   nsString mInitialColor;
+  bool     mShowsAlpha;
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_dom_ColorPickerParent_h
diff --git a/dom/ipc/PBrowser.ipdl b/dom/ipc/PBrowser.ipdl
--- a/dom/ipc/PBrowser.ipdl
+++ b/dom/ipc/PBrowser.ipdl
@@ -436,17 +436,17 @@ parent:
      */
     async ShowTooltip(uint32_t x, uint32_t y, nsString tooltip, nsString direction);
     async HideTooltip();
 
     /**
      * Create an asynchronous color picker on the parent side,
      * but don't open it yet.
      */
-    async PColorPicker(nsString title, nsString initialColor);
+    async PColorPicker(nsString title, nsString initialColor, bool showsAlpha);
 
     /**
      * Create an asynchronous date picker on the parent side,
      * but don't open it yet.
      */
     async PDatePicker(nsString title, nsString initialDate);
 
     async PFilePicker(nsString aTitle, int16_t aMode);
diff --git a/dom/ipc/TabChild.cpp b/dom/ipc/TabChild.cpp
--- a/dom/ipc/TabChild.cpp
+++ b/dom/ipc/TabChild.cpp
@@ -2117,17 +2117,17 @@ TabChild::RecvPDocumentRendererConstruct
 
     if (!PDocumentRendererChild::Send__delete__(actor, renderSize, data)) {
       return IPC_FAIL_NO_REASON(this);
     }
     return IPC_OK();
 }
 
 PColorPickerChild*
-TabChild::AllocPColorPickerChild(const nsString&, const nsString&)
+TabChild::AllocPColorPickerChild(const nsString&, const nsString&, const bool &)
 {
   MOZ_CRASH("unused");
   return nullptr;
 }
 
 bool
 TabChild::DeallocPColorPickerChild(PColorPickerChild* aColorPicker)
 {
diff --git a/dom/ipc/TabChild.h b/dom/ipc/TabChild.h
--- a/dom/ipc/TabChild.h
+++ b/dom/ipc/TabChild.h
@@ -463,17 +463,18 @@ public:
                                    const nsString& aBgcolor,
                                    const uint32_t& aRenderFlags,
                                    const bool& aFlushLayout,
                                    const nsIntSize& aRenderSize) override;
 
 
   virtual PColorPickerChild*
   AllocPColorPickerChild(const nsString& aTitle,
-                         const nsString& aInitialColor) override;
+                         const nsString& aInitialColor,
+                         const bool &showsAlpha) override;
 
   virtual bool DeallocPColorPickerChild(PColorPickerChild* aActor) override;
 
     virtual PDatePickerChild*
     AllocPDatePickerChild(const nsString& title, const nsString& initialDate) override;
     virtual bool DeallocPDatePickerChild(PDatePickerChild* actor) override;
 
   virtual PFilePickerChild*
diff --git a/dom/ipc/TabParent.cpp b/dom/ipc/TabParent.cpp
--- a/dom/ipc/TabParent.cpp
+++ b/dom/ipc/TabParent.cpp
@@ -2451,19 +2451,20 @@ TabParent::GetAuthPrompt(uint32_t aPromp
   }
 
   *aResult = prompt.forget().take();
   return NS_OK;
 }
 
 PColorPickerParent*
 TabParent::AllocPColorPickerParent(const nsString& aTitle,
-                                   const nsString& aInitialColor)
+                                   const nsString& aInitialColor,
+                                   const bool &aShowsAlpha)
 {
-  return new ColorPickerParent(aTitle, aInitialColor);
+  return new ColorPickerParent(aTitle, aInitialColor, aShowsAlpha);
 }
 
 bool
 TabParent::DeallocPColorPickerParent(PColorPickerParent* actor)
 {
   delete actor;
   return true;
 }
diff --git a/dom/ipc/TabParent.h b/dom/ipc/TabParent.h
--- a/dom/ipc/TabParent.h
+++ b/dom/ipc/TabParent.h
@@ -336,17 +336,18 @@ public:
   virtual mozilla::ipc::IPCResult
   RecvDispatchMouseEvent(const mozilla::WidgetMouseEvent& aEvent) override;
 
   virtual mozilla::ipc::IPCResult
   RecvDispatchKeyboardEvent(const mozilla::WidgetKeyboardEvent& aEvent) override;
 
   virtual PColorPickerParent*
   AllocPColorPickerParent(const nsString& aTitle,
-                          const nsString& aInitialColor) override;
+                          const nsString& aInitialColor,
+                          const bool &aShowsAlpha) override;
 
   virtual bool
   DeallocPColorPickerParent(PColorPickerParent* aColorPicker) override;
 
   virtual PDatePickerParent*
   AllocPDatePickerParent(const nsString& aTitle, const nsString& aInitialDate) override;
   virtual bool DeallocPDatePickerParent(PDatePickerParent* aDatePicker) override;
 
diff --git a/dom/xbl/nsXBLContentSink.cpp b/dom/xbl/nsXBLContentSink.cpp
--- a/dom/xbl/nsXBLContentSink.cpp
+++ b/dom/xbl/nsXBLContentSink.cpp
@@ -164,16 +164,18 @@ nsXBLContentSink::FlushText(bool aReleas
 
   return nsXMLContentSink::FlushText(aReleaseTextNode);
 }
 
 NS_IMETHODIMP
 nsXBLContentSink::ReportError(const char16_t* aErrorText, 
                               const char16_t* aSourceText,
                               nsIScriptError *aError,
+                              uint32_t aLineNumber,
+                              uint32_t aColNumber,
                               bool *_retval)
 {
   NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
 
   // XXX FIXME This function overrides and calls on
   // nsXMLContentSink::ReportError, and probably should die.  See bug 347826.
 
   // XXX We should make sure the binding has no effect, but that it also
@@ -189,16 +191,18 @@ nsXBLContentSink::ReportError(const char
           NS_LossyConvertUTF16toASCII(aSourceText).get());
 #endif
 
   // Most of what this does won't be too useful, but whatever...
   // nsXMLContentSink::ReportError will handle the console logging.
   return nsXMLContentSink::ReportError(aErrorText, 
                                        aSourceText, 
                                        aError,
+                                       aLineNumber,
+                                       aColNumber,
                                        _retval);
 }
 
 nsresult
 nsXBLContentSink::ReportUnexpectedElement(nsIAtom* aElementName,
                                           uint32_t aLineNumber)
 {
   // XXX we should really somehow stop the parse and drop the binding
diff --git a/dom/xbl/nsXBLContentSink.h b/dom/xbl/nsXBLContentSink.h
--- a/dom/xbl/nsXBLContentSink.h
+++ b/dom/xbl/nsXBLContentSink.h
@@ -114,16 +114,18 @@ protected:
 
   // nsXMLContentSink overrides
   nsresult FlushText(bool aReleaseTextNode = true) override;
 
   // nsIExpatSink overrides
   NS_IMETHOD ReportError(const char16_t* aErrorText,
                          const char16_t* aSourceText,
                          nsIScriptError *aError,
+                         uint32_t aLineNumber,
+                         uint32_t aColNumber,
                          bool *_retval) override;
 
 protected:
   nsresult ReportUnexpectedElement(nsIAtom* aElementName, uint32_t aLineNumber);
 
   void AddMember(nsXBLProtoImplMember* aMember);
   void AddField(nsXBLProtoImplField* aField);
   
diff --git a/dom/xml/nsXMLContentSink.cpp b/dom/xml/nsXMLContentSink.cpp
--- a/dom/xml/nsXMLContentSink.cpp
+++ b/dom/xml/nsXMLContentSink.cpp
@@ -1300,16 +1300,18 @@ nsXMLContentSink::HandleXMLDeclaration(c
 
   return DidProcessATokenImpl();
 }
 
 NS_IMETHODIMP
 nsXMLContentSink::ReportError(const char16_t* aErrorText,
                               const char16_t* aSourceText,
                               nsIScriptError *aError,
+                              uint32_t aLineNumber,
+                              uint32_t aColNumber,
                               bool *_retval)
 {
   NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
   nsresult rv = NS_OK;
 
   // The expat driver should report the error.  We're just cleaning up the mess.
   *_retval = true;
 
@@ -1356,26 +1358,34 @@ nsXMLContentSink::ReportError(const char
     return NS_OK;
   }
 
   // prepare to set <parsererror> as the document root
   rv = HandleProcessingInstruction(u"xml-stylesheet",
                                    u"href=\"chrome://global/locale/intl.css\" type=\"text/css\"");
   NS_ENSURE_SUCCESS(rv, rv);
 
-  const char16_t* noAtts[] = { 0, 0 };
+  nsAutoString lineString, colString;
+  lineString.AppendInt(aLineNumber);
+  colString.AppendInt(aColNumber);
+  const char16_t* noAtts[] = { NS_LITERAL_STRING("line").get(),
+                                lineString.get(),
+                                NS_LITERAL_STRING("col").get(),
+                                colString.get(),
+                                0,
+                                0 };
 
   NS_NAMED_LITERAL_STRING(errorNs,
                           "http://www.mozilla.org/newlayout/xml/parsererror.xml");
 
   nsAutoString parsererror(errorNs);
   parsererror.Append((char16_t)0xFFFF);
   parsererror.AppendLiteral("parsererror");
 
-  rv = HandleStartElement(parsererror.get(), noAtts, 0, (uint32_t)-1,
+  rv = HandleStartElement(parsererror.get(), noAtts, 2, (uint32_t)-1,
                           false);
   NS_ENSURE_SUCCESS(rv, rv);
 
   rv = HandleCharacterData(aErrorText, NS_strlen(aErrorText), false);
   NS_ENSURE_SUCCESS(rv, rv);
 
   nsAutoString sourcetext(errorNs);
   sourcetext.Append((char16_t)0xFFFF);
diff --git a/dom/xml/nsXMLFragmentContentSink.cpp b/dom/xml/nsXMLFragmentContentSink.cpp
--- a/dom/xml/nsXMLFragmentContentSink.cpp
+++ b/dom/xml/nsXMLFragmentContentSink.cpp
@@ -51,16 +51,18 @@ public:
   NS_IMETHOD HandleProcessingInstruction(const char16_t* aTarget,
                                          const char16_t* aData) override;
   NS_IMETHOD HandleXMLDeclaration(const char16_t* aVersion,
                                   const char16_t* aEncoding,
                                   int32_t aStandalone) override;
   NS_IMETHOD ReportError(const char16_t* aErrorText,
                          const char16_t* aSourceText,
                          nsIScriptError* aError,
+                         uint32_t aLineNumber,
+                         uint32_t aColNumber,
                          bool* aRetval) override;
 
   // nsIContentSink
   NS_IMETHOD WillBuildModel(nsDTDMode aDTDMode) override;
   NS_IMETHOD DidBuildModel(bool aTerminated) override;
   NS_IMETHOD SetDocumentCharset(nsACString& aCharset) override;
   virtual nsISupports* GetTarget() override;
   NS_IMETHOD DidProcessATokenImpl();
@@ -280,16 +282,18 @@ nsXMLFragmentContentSink::HandleXMLDecla
   NS_NOTREACHED("fragments shouldn't have XML declarations");
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsXMLFragmentContentSink::ReportError(const char16_t* aErrorText, 
                                       const char16_t* aSourceText,
                                       nsIScriptError *aError,
+                                      uint32_t aLineNumber,
+                                      uint32_t aColNumber,
                                       bool *_retval)
 {
   NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
 
   // The expat driver should report the error.
   *_retval = true;
 
   mParseError = true;
diff --git a/dom/xslt/xslt/txMozillaStylesheetCompiler.cpp b/dom/xslt/xslt/txMozillaStylesheetCompiler.cpp
--- a/dom/xslt/xslt/txMozillaStylesheetCompiler.cpp
+++ b/dom/xslt/xslt/txMozillaStylesheetCompiler.cpp
@@ -200,16 +200,18 @@ txStylesheetSink::HandleXMLDeclaration(c
 {
     return NS_OK;
 }
 
 NS_IMETHODIMP
 txStylesheetSink::ReportError(const char16_t *aErrorText,
                               const char16_t *aSourceText,
                               nsIScriptError *aError,
+                              uint32_t aLineNumber,
+                              uint32_t aColNumber,
                               bool *_retval)
 {
     NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
 
     // The expat driver should report the error.
     *_retval = true;
 
     mCompiler->cancel(NS_ERROR_FAILURE, aErrorText, aSourceText);
diff --git a/dom/xul/nsXULContentSink.cpp b/dom/xul/nsXULContentSink.cpp
--- a/dom/xul/nsXULContentSink.cpp
+++ b/dom/xul/nsXULContentSink.cpp
@@ -647,16 +647,18 @@ XULContentSinkImpl::HandleXMLDeclaration
   return NS_OK;
 }
 
 
 NS_IMETHODIMP
 XULContentSinkImpl::ReportError(const char16_t* aErrorText,
                                 const char16_t* aSourceText,
                                 nsIScriptError *aError,
+                                uint32_t aLineNumber,
+                                uint32_t aColNumber,
                                 bool *_retval)
 {
   NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
 
   // The expat driver should report the error.
   *_retval = true;
 
   nsresult rv = NS_OK;
diff --git a/editor/composer/nsComposerCommands.cpp b/editor/composer/nsComposerCommands.cpp
--- a/editor/composer/nsComposerCommands.cpp
+++ b/editor/composer/nsComposerCommands.cpp
@@ -206,16 +206,23 @@ nsStyleUpdatingCommand::ToggleState(nsIE
 
   //create some params now...
   nsresult rv;
   nsCOMPtr<nsICommandParams> params =
       do_CreateInstance(NS_COMMAND_PARAMS_CONTRACTID,&rv);
   if (NS_FAILED(rv) || !params)
     return rv;
 
+  bool isCSS;
+  htmlEditor->GetIsCSSEnabled(&isCSS);
+  if (isCSS
+      && (mTagName == nsGkAtoms::b
+          || mTagName == nsGkAtoms::i
+          || mTagName == nsGkAtoms::u))
+    htmlEditor->SetIsCSSEnabled(false);
   // tags "href" and "name" are special cases in the core editor
   // they are used to remove named anchor/link and shouldn't be used for insertion
   bool doTagRemoval;
   if (mTagName == nsGkAtoms::href || mTagName == nsGkAtoms::name) {
     doTagRemoval = true;
   } else {
     // check current selection; set doTagRemoval if formatting should be removed
     rv = GetCurrentState(aEditor, params);
@@ -247,16 +254,17 @@ nsStyleUpdatingCommand::ToggleState(nsIE
       rv = RemoveTextProperty(htmlEditor, tagName);
     }
     if (NS_SUCCEEDED(rv))
       rv = SetTextProperty(htmlEditor, tagName);
 
     aEditor->EndTransaction();
   }
 
+  htmlEditor->SetIsCSSEnabled(isCSS);
   return rv;
 }
 
 nsListCommand::nsListCommand(nsIAtom* aTagName)
 : nsBaseStateUpdatingCommand(aTagName)
 {
 }
 
@@ -458,17 +466,25 @@ nsIndentCommand::IsCommandEnabled(const 
 
 NS_IMETHODIMP
 nsIndentCommand::DoCommand(const char *aCommandName, nsISupports *refCon)
 {
   nsCOMPtr<nsIHTMLEditor> editor = do_QueryInterface(refCon);
 
   nsresult rv = NS_OK;
   if (editor) {
+    bool isCssEnabled;
+    nsresult rv = editor->GetIsCSSEnabled(&isCssEnabled);
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = editor->SetIsCSSEnabled(true);
+    NS_ENSURE_SUCCESS(rv, rv);
+
     rv = editor->Indent(NS_LITERAL_STRING("indent"));
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = editor->SetIsCSSEnabled(isCssEnabled);
   }
 
   return rv;
 }
 
 NS_IMETHODIMP
 nsIndentCommand::DoCommandParams(const char *aCommandName,
                                  nsICommandParams *aParams,
@@ -507,17 +523,27 @@ nsOutdentCommand::IsCommandEnabled(const
 }
 
 
 NS_IMETHODIMP
 nsOutdentCommand::DoCommand(const char *aCommandName, nsISupports *refCon)
 {
   nsCOMPtr<nsIHTMLEditor> htmlEditor = do_QueryInterface(refCon);
   if (htmlEditor)
-    return htmlEditor->Indent(NS_LITERAL_STRING("outdent"));
+  {
+    bool isCssEnabled;
+    nsresult rv = htmlEditor->GetIsCSSEnabled(&isCssEnabled);
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = htmlEditor->SetIsCSSEnabled(true);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    rv = htmlEditor->Indent(NS_LITERAL_STRING("outdent"));
+    NS_ENSURE_SUCCESS(rv, rv);
+    rv = htmlEditor->SetIsCSSEnabled(isCssEnabled);
+  }
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsOutdentCommand::DoCommandParams(const char *aCommandName,
                                   nsICommandParams *aParams,
                                   nsISupports *refCon)
@@ -914,22 +940,31 @@ nsAlignCommand::nsAlignCommand()
 nsresult
 nsAlignCommand::GetCurrentState(nsIEditor *aEditor, nsICommandParams *aParams)
 {
   NS_ASSERTION(aEditor, "Need an editor here");
 
   nsCOMPtr<nsIHTMLEditor> htmlEditor = do_QueryInterface(aEditor);
   NS_ENSURE_TRUE(htmlEditor, NS_ERROR_FAILURE);
 
+  bool isCssEnabled;
+  nsresult rv = htmlEditor->GetIsCSSEnabled(&isCssEnabled);
+  NS_ENSURE_SUCCESS(rv, rv);
+  rv = htmlEditor->SetIsCSSEnabled(true);
+  NS_ENSURE_SUCCESS(rv, rv);
+
   nsIHTMLEditor::EAlignment firstAlign;
   bool outMixed;
-  nsresult rv = htmlEditor->GetAlignment(&outMixed, &firstAlign);
+  rv = htmlEditor->GetAlignment(&outMixed, &firstAlign);
 
   NS_ENSURE_SUCCESS(rv, rv);
 
+  rv = htmlEditor->SetIsCSSEnabled(isCssEnabled);
+  NS_ENSURE_SUCCESS(rv, rv);
+
   nsAutoString outStateString;
   switch (firstAlign) {
     default:
     case nsIHTMLEditor::eLeft:
       outStateString.AssignLiteral("left");
       break;
 
     case nsIHTMLEditor::eCenter:
@@ -954,17 +989,24 @@ nsAlignCommand::GetCurrentState(nsIEdito
 nsresult
 nsAlignCommand::SetState(nsIEditor *aEditor, nsString& newState)
 {
   NS_ASSERTION(aEditor, "Need an editor here");
 
   nsCOMPtr<nsIHTMLEditor> htmlEditor = do_QueryInterface(aEditor);
   NS_ENSURE_TRUE(htmlEditor, NS_ERROR_FAILURE);
 
-  return htmlEditor->Align(newState);
+  bool isCssEnabled;
+  nsresult rv = htmlEditor->GetIsCSSEnabled(&isCssEnabled);
+  NS_ENSURE_SUCCESS(rv, rv);
+  rv = htmlEditor->SetIsCSSEnabled(true);
+  NS_ENSURE_SUCCESS(rv, rv);
+  rv = htmlEditor->Align(newState);
+  NS_ENSURE_SUCCESS(rv, rv);
+  return htmlEditor->SetIsCSSEnabled(isCssEnabled);
 }
 
 nsAbsolutePositioningCommand::nsAbsolutePositioningCommand()
 : nsBaseStateUpdatingCommand(nsGkAtoms::_empty)
 {
 }
 
 NS_IMETHODIMP
diff --git a/editor/libeditor/CSSEditUtils.cpp b/editor/libeditor/CSSEditUtils.cpp
--- a/editor/libeditor/CSSEditUtils.cpp
+++ b/editor/libeditor/CSSEditUtils.cpp
@@ -334,21 +334,22 @@ CSSEditUtils::IsCSSEditableProperty(nsIN
   nsINode* node = aNode;
   // we need an element node here
   if (node->NodeType() == nsIDOMNode::TEXT_NODE) {
     node = node->GetParentNode();
     NS_ENSURE_TRUE(node, false);
   }
 
   // html inline styles B I TT U STRIKE and COLOR/FACE on FONT
-  if (nsGkAtoms::b == aProperty ||
-      nsGkAtoms::i == aProperty ||
+  if (//nsGkAtoms::b == aProperty ||
+      //nsGkAtoms::i == aProperty ||
       nsGkAtoms::tt == aProperty ||
-      nsGkAtoms::u == aProperty ||
+      //nsGkAtoms::u == aProperty ||
       nsGkAtoms::strike == aProperty ||
+      nsGkAtoms::nobr == aProperty ||
       (nsGkAtoms::font == aProperty && aAttribute &&
        (aAttribute == nsGkAtoms::color || aAttribute == nsGkAtoms::face))) {
     return true;
   }
 
   // ALIGN attribute on elements supporting it
   if (aAttribute == nsGkAtoms::align &&
       node->IsAnyOfHTMLElements(nsGkAtoms::div,
@@ -831,16 +832,18 @@ CSSEditUtils::GenerateCSSDeclarationsFro
   if (nsGkAtoms::b == aHTMLProperty) {
     equivTable = boldEquivTable;
   } else if (nsGkAtoms::i == aHTMLProperty) {
     equivTable = italicEquivTable;
   } else if (nsGkAtoms::u == aHTMLProperty) {
     equivTable = underlineEquivTable;
   } else if (nsGkAtoms::strike == aHTMLProperty) {
     equivTable = strikeEquivTable;
+  } else if (nsGkAtoms::nobr == aHTMLProperty) {
+    equivTable = nowrapEquivTable;
   } else if (nsGkAtoms::tt == aHTMLProperty) {
     equivTable = ttEquivTable;
   } else if (aAttribute) {
     if (nsGkAtoms::font == aHTMLProperty && aAttribute == nsGkAtoms::color) {
       equivTable = fontColorEquivTable;
     } else if (nsGkAtoms::font == aHTMLProperty &&
                aAttribute == nsGkAtoms::face) {
       equivTable = fontFaceEquivTable;
diff --git a/editor/libeditor/EditorBase.cpp b/editor/libeditor/EditorBase.cpp
--- a/editor/libeditor/EditorBase.cpp
+++ b/editor/libeditor/EditorBase.cpp
@@ -99,16 +99,17 @@
 #include "nsStyleConsts.h"              // for NS_STYLE_DIRECTION_RTL, etc.
 #include "nsStyleContext.h"             // for nsStyleContext
 #include "nsStyleStruct.h"              // for nsStyleDisplay, nsStyleText, etc.
 #include "nsStyleStructFwd.h"           // for nsIFrame::StyleUIReset, etc.
 #include "nsTextNode.h"                 // for nsTextNode
 #include "nsThreadUtils.h"              // for nsRunnable
 #include "nsTransactionManager.h"       // for nsTransactionManager
 #include "prtime.h"                     // for PR_Now
+#include "nsIEditorMouseObserver.h"
 
 class nsIOutputStream;
 class nsIParserService;
 class nsITransferable;
 
 #ifdef DEBUG
 #include "nsIDOMHTMLDocument.h"         // for nsIDOMHTMLDocument
 #endif
@@ -167,16 +168,17 @@ NS_IMPL_CYCLE_COLLECTION_CLASS(EditorBas
 
 NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(EditorBase)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mRootElement)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mInlineSpellChecker)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mTxnMgr)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mIMETextNode)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mActionListeners)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mEditorObservers)
+ NS_IMPL_CYCLE_COLLECTION_UNLINK(mEditorMouseObservers)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mDocStateListeners)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mEventTarget)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mEventListener)
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mSavedSel);
  NS_IMPL_CYCLE_COLLECTION_UNLINK(mRangeUpdater);
 NS_IMPL_CYCLE_COLLECTION_UNLINK_END
 
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN(EditorBase)
@@ -187,16 +189,17 @@ NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN(
    return NS_SUCCESS_INTERRUPTED_TRAVERSE;
  }
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mRootElement)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mInlineSpellChecker)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mTxnMgr)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mIMETextNode)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mActionListeners)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mEditorObservers)
+ NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mEditorMouseObservers)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mDocStateListeners)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mEventTarget)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mEventListener)
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mSavedSel);
  NS_IMPL_CYCLE_COLLECTION_TRAVERSE(mRangeUpdater);
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
 
 NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(EditorBase)
@@ -455,16 +458,17 @@ EditorBase::PreDestroy(bool aDestroyingF
   NotifyDocumentListeners(eDocumentToBeDestroyed);
 
   // Unregister event listeners
   RemoveEventListeners();
   // If this editor is still hiding the caret, we need to restore it.
   HideCaret(false);
   mActionListeners.Clear();
   mEditorObservers.Clear();
+  mEditorMouseObservers.Clear();
   mDocStateListeners.Clear();
   mInlineSpellChecker = nullptr;
   mSpellcheckCheckboxState = eTriUnset;
   mRootElement = nullptr;
 
   mDidPreDestroy = true;
   return NS_OK;
 }
@@ -1813,16 +1817,46 @@ EditorBase::RemoveEditorObserver(nsIEdit
 {
   NS_ENSURE_TRUE(aObserver, NS_ERROR_FAILURE);
 
   mEditorObservers.RemoveElement(aObserver);
 
   return NS_OK;
 }
 
+NS_IMETHODIMP
+EditorBase::AddEditorMouseObserver(nsIEditorMouseObserver *aObserver)
+{
+  // we don't keep ownership of the observers.  They must
+  // remove themselves as observers before they are destroyed.
+
+  NS_ENSURE_TRUE(aObserver, NS_ERROR_NULL_POINTER);
+
+  // Make sure the listener isn't already on the list
+  if (mEditorMouseObservers.IndexOf(aObserver) == -1)
+  {
+    if (!mEditorMouseObservers.AppendObject(aObserver))
+      return NS_ERROR_FAILURE;
+  }
+
+  return NS_OK;
+}
+
+
+NS_IMETHODIMP
+EditorBase::RemoveEditorMouseObserver(nsIEditorMouseObserver *aObserver)
+{
+  NS_ENSURE_TRUE(aObserver, NS_ERROR_FAILURE);
+
+  if (!mEditorMouseObservers.RemoveObject(aObserver))
+    return NS_ERROR_FAILURE;
+
+  return NS_OK;
+}
+
 class EditorInputEventDispatcher final : public Runnable
 {
 public:
   EditorInputEventDispatcher(EditorBase* aEditorBase,
                              nsIContent* aTarget,
                              bool aIsComposing)
     : mEditorBase(aEditorBase)
     , mTarget(aTarget)
@@ -1919,16 +1953,37 @@ EditorBase::FireInputEvent()
 
   // NOTE: Don't refer IsIMEComposing() because it returns false even before
   //       compositionend.  However, DOM Level 3 Events defines it should be
   //       true after compositionstart and before compositionend.
   nsContentUtils::AddScriptRunner(
     new EditorInputEventDispatcher(this, target, !!GetComposition()));
 }
 
+bool
+EditorBase::NotifyEditorMouseObservers(MouseEventType aMouseEventType,
+                                       int32_t aClientX,
+                                       int32_t aClientY,
+                                       nsIDOMNode* aTarget,
+                                       bool aIsShiftKey)
+{
+  bool rv = false;
+  for (int32_t i = 0; i < mEditorMouseObservers.Count(); i++) {
+    bool oneRv = false;
+    switch (aMouseEventType) {
+    case EditorBase::kMouseDown: mEditorMouseObservers[i]->MouseDown(aClientX, aClientY, aTarget, aIsShiftKey, &rv); break;
+    case EditorBase::kMouseUp:   mEditorMouseObservers[i]->MouseUp(aClientX, aClientY, aTarget, aIsShiftKey, &rv); break;
+    case EditorBase::kMouseMove: mEditorMouseObservers[i]->MouseMove(aClientX, aClientY, aTarget, aIsShiftKey, &rv); break;
+    }
+    rv |= oneRv;
+  }
+
+  return rv;
+}
+
 NS_IMETHODIMP
 EditorBase::AddEditActionListener(nsIEditActionListener* aListener)
 {
   NS_ENSURE_TRUE(aListener, NS_ERROR_NULL_POINTER);
 
   // Make sure the listener isn't already on the list
   if (!mActionListeners.Contains(aListener)) {
     mActionListeners.AppendElement(*aListener);
@@ -2288,17 +2343,21 @@ EditorBase::CloneAttributes(Element* aDe
 
   // Use transaction system for undo only if destination is already in the
   // document
   NS_ENSURE_TRUE(GetRoot(), );
   bool destInBody = GetRoot()->Contains(aDest);
 
   // Clear existing attributes
   RefPtr<nsDOMAttributeMap> destAttributes = aDest->Attributes();
-  while (RefPtr<Attr> attr = destAttributes->Item(0)) {
+  uint32_t destCount = destAttributes->Length();
+  for (int32_t i = destCount - 1; i >= 0; i--) {
+    RefPtr<Attr> attr = destAttributes->Item(i);
+    nsAutoString value;
+    attr->GetValue(value);
     if (destInBody) {
       RemoveAttribute(aDest, attr->NodeInfo()->NameAtom());
     } else {
       aDest->UnsetAttr(kNameSpaceID_None, attr->NodeInfo()->NameAtom(), true);
     }
   }
 
   // Set just the attributes that the source element has
@@ -2757,16 +2816,45 @@ struct SavedRange final
   RefPtr<Selection> mSelection;
   nsCOMPtr<nsINode> mStartNode;
   nsCOMPtr<nsINode> mEndNode;
   int32_t mStartOffset;
   int32_t mEndOffset;
 };
 
 nsresult
+EditorBase::RemoveNonCopyableAttributes(nsIDOMElement * aElement)
+{
+  NS_ENSURE_TRUE(aElement, NS_ERROR_NULL_POINTER);
+  nsresult res = NS_OK;
+
+  nsCOMPtr<nsIDOMMozNamedAttrMap> attributes;
+  aElement->GetAttributes(getter_AddRefs(attributes));
+  NS_ENSURE_TRUE(attributes, NS_ERROR_FAILURE);
+  uint32_t attrCount;
+  attributes->GetLength(&attrCount);
+  nsCOMPtr<nsIDOMAttr> attr;
+  for (int32_t i = attrCount - 1; i >= 0; i--)   {
+    if (NS_SUCCEEDED(attributes->Item(i, getter_AddRefs(attr))) && attr) {
+      nsString attrName;
+      if (NS_SUCCEEDED(attr->GetName(attrName))) {
+        ToLowerCase(attrName);
+          if (StringBeginsWith(attrName, NS_LITERAL_STRING("its-")) ||
+              attrName.EqualsLiteral("translate") ||
+              attrName.EqualsLiteral("id")) {
+            res = RemoveAttribute(aElement, attrName);
+            NS_ENSURE_SUCCESS(res, res);
+        }
+      }
+    }
+  }
+  return res;
+}
+
+nsresult
 EditorBase::SplitNodeImpl(nsIContent& aExistingRightNode,
                           int32_t aOffset,
                           nsIContent& aNewLeftNode)
 {
   // Remember all selection points.
   AutoTArray<SavedRange, 10> savedRanges;
   for (size_t i = 0; i < kPresentSelectionTypeCount; ++i) {
     SelectionType selectionType(ToSelectionType(1 << i));
@@ -3912,16 +4000,21 @@ EditorBase::SplitNodeDeep(nsIContent& aN
     if ((aEmptyContainers == EmptyContainers::yes &&
          !nodeToSplit->GetAsText()) ||
         (offset && offset != (int32_t)nodeToSplit->Length())) {
       didSplit = true;
       ErrorResult rv;
       nsCOMPtr<nsIContent> newLeftNode = SplitNode(nodeToSplit, offset, rv);
       NS_ENSURE_TRUE(!NS_FAILED(rv.StealNSResult()), -1);
 
+      nsCOMPtr<nsIDOMElement> elt = do_QueryInterface(nodeToSplit);
+      if (elt) {
+        RemoveNonCopyableAttributes(elt);
+      }
+
       rightNode = nodeToSplit;
       leftNode = newLeftNode;
     }
 
     NS_ENSURE_TRUE(nodeToSplit->GetParent(), -1);
     OwningNonNull<nsIContent> parentNode = *nodeToSplit->GetParent();
 
     if (!didSplit && offset) {
diff --git a/editor/libeditor/EditorBase.h b/editor/libeditor/EditorBase.h
--- a/editor/libeditor/EditorBase.h
+++ b/editor/libeditor/EditorBase.h
@@ -155,16 +155,23 @@ public:
   typedef dom::Text Text;
 
   enum IterDirection
   {
     kIterForward,
     kIterBackward
   };
 
+  enum MouseEventType
+  {
+    kMouseDown,
+    kMouseUp,
+    kMouseMove
+  };
+
   /**
    * The default constructor. This should suffice. the setting of the
    * interfaces is done after the construction of the editor class.
    */
   EditorBase();
 
   virtual TextEditor* AsTextEditor() = 0;
   virtual const TextEditor* AsTextEditor() const = 0;
@@ -188,16 +195,21 @@ public:
   already_AddRefed<nsIWidget> GetWidget();
   enum NotificationForEditorObservers
   {
     eNotifyEditorObserversOfEnd,
     eNotifyEditorObserversOfBefore,
     eNotifyEditorObserversOfCancel
   };
   void NotifyEditorObservers(NotificationForEditorObservers aNotification);
+  bool NotifyEditorMouseObservers(MouseEventType aMouseEventType,
+                                  int32_t aClientX,
+                                  int32_t aClientY,
+                                  nsIDOMNode* aTarget,
+                                  bool aIsShiftKey);
 
   // nsIEditor methods
   NS_DECL_NSIEDITOR
 
   // nsIEditorIMESupport methods
   NS_DECL_NSIEDITORIMESUPPORT
 
   // nsIPhonetic
@@ -938,16 +950,18 @@ public:
 
   virtual nsresult InsertFromDrop(nsIDOMEvent* aDropEvent) = 0;
 
   virtual already_AddRefed<nsIDOMNode> FindUserSelectAllNode(nsIDOMNode* aNode)
   {
     return nullptr;
   }
 
+  nsresult RemoveNonCopyableAttributes(nsIDOMElement * aElement);
+
   /**
    * GetIMESelectionStartOffsetIn() returns the start offset of IME selection in
    * the aTextNode.  If there is no IME selection, returns -1.
    */
   int32_t GetIMESelectionStartOffsetIn(nsINode* aTextNode);
 
   /**
    * FindBetterInsertionPoint() tries to look for better insertion point which
@@ -1012,16 +1026,18 @@ protected:
   // Listens to all low level actions on the doc.
   typedef AutoTArray<OwningNonNull<nsIEditActionListener>, 5>
             AutoActionListenerArray;
   AutoActionListenerArray mActionListeners;
   // Just notify once per high level change.
   typedef AutoTArray<OwningNonNull<nsIEditorObserver>, 3>
             AutoEditorObserverArray;
   AutoEditorObserverArray mEditorObservers;
+  // Listen to mouse events
+  nsCOMArray<nsIEditorMouseObserver> mEditorMouseObservers;
   // Listen to overall doc state (dirty or not, just created, etc.).
   typedef AutoTArray<OwningNonNull<nsIDocumentStateListener>, 1>
             AutoDocumentStateListenerArray;
   AutoDocumentStateListenerArray mDocStateListeners;
 
   // Cached selection for AutoSelectionRestorer.
   SelectionState mSavedSel;
   // Utility class object for maintaining preserved ranges.
diff --git a/editor/libeditor/EditorEventListener.cpp b/editor/libeditor/EditorEventListener.cpp
--- a/editor/libeditor/EditorEventListener.cpp
+++ b/editor/libeditor/EditorEventListener.cpp
@@ -182,16 +182,19 @@ EditorEventListener::InstallToEditor()
   //     code need to check if it's editable.  It makes easier create new bugs.
   elmP->AddEventListenerByType(this,
                                NS_LITERAL_STRING("mousedown"),
                                TrustedEventsAtCapture());
   elmP->AddEventListenerByType(this,
                                NS_LITERAL_STRING("mouseup"),
                                TrustedEventsAtCapture());
   elmP->AddEventListenerByType(this,
+                               NS_LITERAL_STRING("mousemove"),
+                               TrustedEventsAtCapture());
+  elmP->AddEventListenerByType(this,
                                NS_LITERAL_STRING("click"),
                                TrustedEventsAtCapture());
   // Focus event doesn't bubble so adding the listener to capturing phase.
   // XXX Should we listen focus/blur events of system group too? Or should
   //     editor notified focus/blur of the element from nsFocusManager
   //     directly?  Because if the event propagation is stopped by JS,
   //     editor cannot initialize selection as expected.
   elmP->AddEventListenerByType(this,
@@ -276,16 +279,19 @@ EditorEventListener::UninstallFromEditor
                                   TrustedEventsAtSystemGroupBubble());
   elmP->RemoveEventListenerByType(this,
                                   NS_LITERAL_STRING("mousedown"),
                                   TrustedEventsAtCapture());
   elmP->RemoveEventListenerByType(this,
                                   NS_LITERAL_STRING("mouseup"),
                                   TrustedEventsAtCapture());
   elmP->RemoveEventListenerByType(this,
+                                  NS_LITERAL_STRING("mousemove"),
+                                  TrustedEventsAtCapture());
+  elmP->RemoveEventListenerByType(this,
                                   NS_LITERAL_STRING("click"),
                                   TrustedEventsAtCapture());
   elmP->RemoveEventListenerByType(this,
                                   NS_LITERAL_STRING("blur"),
                                   TrustedEventsAtCapture());
   elmP->RemoveEventListenerByType(this,
                                   NS_LITERAL_STRING("focus"),
                                   TrustedEventsAtCapture());
@@ -450,16 +456,22 @@ EditorEventListener::HandleEvent(nsIDOME
         mMouseDownOrUpConsumedByIME = true;
       }
       if (mMouseDownOrUpConsumedByIME) {
         return NS_OK;
       }
       nsCOMPtr<nsIDOMMouseEvent> mouseEvent = do_QueryInterface(aEvent);
       return NS_WARN_IF(!mouseEvent) ? NS_OK : MouseUp(mouseEvent);
     }
+    // mousemove:
+    case eMouseMove: {
+      nsCOMPtr<nsIDOMMouseEvent> mouseEvent = do_QueryInterface(aEvent);
+      NS_ENSURE_TRUE(mouseEvent, NS_OK);
+      return NS_OK;
+    }
     // click
     case eMouseClick: {
       nsCOMPtr<nsIDOMMouseEvent> mouseEvent = do_QueryInterface(aEvent);
       NS_ENSURE_TRUE(mouseEvent, NS_OK);
       // If the preceding mousedown event or mouseup event was consumed,
       // editor shouldn't handle this click event.
       if (mMouseDownOrUpConsumedByIME) {
         mMouseDownOrUpConsumedByIME = false;
diff --git a/editor/libeditor/EditorEventListener.h b/editor/libeditor/EditorEventListener.h
--- a/editor/libeditor/EditorEventListener.h
+++ b/editor/libeditor/EditorEventListener.h
@@ -62,16 +62,17 @@ protected:
   nsresult KeyUp(const WidgetKeyboardEvent* aKeyboardEvent);
 #endif
   nsresult KeyPress(WidgetKeyboardEvent* aKeyboardEvent);
   nsresult HandleChangeComposition(WidgetCompositionEvent* aCompositionEvent);
   nsresult HandleStartComposition(WidgetCompositionEvent* aCompositionEvent);
   void HandleEndComposition(WidgetCompositionEvent* aCompositionEvent);
   virtual nsresult MouseDown(nsIDOMMouseEvent* aMouseEvent);
   virtual nsresult MouseUp(nsIDOMMouseEvent* aMouseEvent) { return NS_OK; }
+  virtual nsresult MouseMove(nsIDOMMouseEvent* aMouseEvent) { return NS_OK; }
   virtual nsresult MouseClick(nsIDOMMouseEvent* aMouseEvent);
   nsresult Focus(InternalFocusEvent* aFocusEvent);
   nsresult Blur(InternalFocusEvent* aBlurEvent);
   nsresult DragEnter(nsIDOMDragEvent* aDragEvent);
   nsresult DragOver(nsIDOMDragEvent* aDragEvent);
   nsresult DragExit(nsIDOMDragEvent* aDragEvent);
   nsresult Drop(nsIDOMDragEvent* aDragEvent);
 
diff --git a/editor/libeditor/HTMLEditRules.cpp b/editor/libeditor/HTMLEditRules.cpp
--- a/editor/libeditor/HTMLEditRules.cpp
+++ b/editor/libeditor/HTMLEditRules.cpp
@@ -448,16 +448,18 @@ HTMLEditRules::AfterEditInner(EditAction
     mDocChangeRange->GetStartContainer(getter_AddRefs(rangeStartParent));
     mDocChangeRange->GetEndContainer(getter_AddRefs(rangeEndParent));
     mDocChangeRange->GetStartOffset(&rangeStartOffset);
     mDocChangeRange->GetEndOffset(&rangeEndOffset);
     if (rangeStartParent && rangeEndParent)
       bDamagedRange = true;
   }
 
+  nsresult rv;
+
   if (bDamagedRange && !((action == EditAction::undo) ||
                          (action == EditAction::redo))) {
     // don't let any txns in here move the selection around behind our back.
     // Note that this won't prevent explicit selection setting from working.
     NS_ENSURE_STATE(mHTMLEditor);
     AutoTransactionsConserveSelection dontSpazMySelection(mHTMLEditor);
 
     // expand the "changed doc range" as needed
@@ -480,17 +482,20 @@ HTMLEditRules::AfterEditInner(EditAction
     if (action != EditAction::insertText &&
         action != EditAction::insertIMEText) {
       NS_ENSURE_STATE(mHTMLEditor);
       nsresult rv = mHTMLEditor->CollapseAdjacentTextNodes(mDocChangeRange);
       NS_ENSURE_SUCCESS(rv, rv);
     }
 
     // clean up any empty nodes in the selection
-    nsresult rv = RemoveEmptyNodes();
+    if ((action != EditAction::insertNode) &&
+        (action != EditAction::htmlPaste) &&
+        (action != EditAction::loadHTML))
+      rv = RemoveEmptyNodes();
     NS_ENSURE_SUCCESS(rv, rv);
 
     // attempt to transform any unneeded nbsp's into spaces after doing various operations
     if (action == EditAction::insertText ||
         action == EditAction::insertIMEText ||
         action == EditAction::deleteSelection ||
         action == EditAction::insertBreak ||
         action == EditAction::htmlPaste ||
@@ -540,22 +545,21 @@ HTMLEditRules::AfterEditInner(EditAction
       rv = ReapplyCachedStyles();
       NS_ENSURE_SUCCESS(rv, rv);
       ClearCachedStyles();
     }
   }
 
   NS_ENSURE_STATE(mHTMLEditor);
 
-  nsresult rv =
-    mHTMLEditor->HandleInlineSpellCheck(action, selection,
-                                        GetAsDOMNode(mRangeItem->startNode),
-                                        mRangeItem->startOffset,
-                                        rangeStartParent, rangeStartOffset,
-                                        rangeEndParent, rangeEndOffset);
+  rv = mHTMLEditor->HandleInlineSpellCheck(action, selection,
+                                           GetAsDOMNode(mRangeItem->startNode),
+                                           mRangeItem->startOffset,
+                                           rangeStartParent, rangeStartOffset,
+                                           rangeEndParent, rangeEndOffset);
   NS_ENSURE_SUCCESS(rv, rv);
 
   // detect empty doc
   rv = CreateBogusNodeIfNeeded(selection);
   NS_ENSURE_SUCCESS(rv, rv);
 
   // adjust selection HINT if needed
   if (!mDidExplicitlySetInterline) {
@@ -1342,50 +1346,18 @@ HTMLEditRules::WillInsertText(EditAction
     const char16_t *unicodeBuf = tString.get();
     int32_t pos = 0;
     NS_NAMED_LITERAL_STRING(newlineStr, LFSTR);
 
     // for efficiency, break out the pre case separately.  This is because
     // its a lot cheaper to search the input string for only newlines than
     // it is to search for both tabs and newlines.
     if (isPRE || IsPlaintextEditor()) {
-      while (unicodeBuf && pos != -1 &&
-             pos < static_cast<int32_t>(inString->Length())) {
-        int32_t oldPos = pos;
-        int32_t subStrLen;
-        pos = tString.FindChar(nsCRT::LF, oldPos);
-
-        if (pos != -1) {
-          subStrLen = pos - oldPos;
-          // if first char is newline, then use just it
-          if (!subStrLen) {
-            subStrLen = 1;
-          }
-        } else {
-          subStrLen = tString.Length() - oldPos;
-          pos = tString.Length();
-        }
-
-        nsDependentSubstring subStr(tString, oldPos, subStrLen);
-
-        // is it a return?
-        if (subStr.Equals(newlineStr)) {
-          NS_ENSURE_STATE(mHTMLEditor);
-          nsCOMPtr<Element> br =
-            mHTMLEditor->CreateBRImpl(address_of(curNode), &curOffset,
-                                      nsIEditor::eNone);
-          NS_ENSURE_STATE(br);
-          pos++;
-        } else {
-          NS_ENSURE_STATE(mHTMLEditor);
-          rv = mHTMLEditor->InsertTextImpl(subStr, address_of(curNode),
-                                           &curOffset, doc);
-          NS_ENSURE_SUCCESS(rv, rv);
-        }
-      }
+      rv = mHTMLEditor->InsertTextImpl(tString, address_of(curNode), &curOffset, doc);
+      NS_ENSURE_SUCCESS(rv, rv);
     } else {
       NS_NAMED_LITERAL_STRING(tabStr, "\t");
       NS_NAMED_LITERAL_STRING(spacesStr, "    ");
       char specialChars[] = {TAB, nsCRT::LF, 0};
       while (unicodeBuf && pos != -1 &&
              pos < static_cast<int32_t>(inString->Length())) {
         int32_t oldPos = pos;
         int32_t subStrLen;
@@ -4564,17 +4536,17 @@ HTMLEditRules::CreateStyleForInsertText(
         NS_ENSURE_SUCCESS(rv, rv);
       }
     }
 
     while (item) {
       NS_ENSURE_STATE(mHTMLEditor);
       rv = mHTMLEditor->SetInlinePropertyOnNode(*node->AsContent(),
                                                 *item->tag, &item->attr,
-                                                item->value);
+                                                item->value, false);
       NS_ENSURE_SUCCESS(rv, rv);
       item = mHTMLEditor->mTypeInState->TakeSetProperty();
     }
   }
   if (weDidSomething) {
     return aSelection.Collapse(node, offset);
   }
 
@@ -6524,16 +6496,17 @@ HTMLEditRules::SplitParagraph(nsIDOMNode
   if (EditorBase::IsTextNode(child) ||
       mHTMLEditor->IsContainer(child)) {
     aSelection->Collapse(child,0);
   } else {
     int32_t offset;
     nsCOMPtr<nsIDOMNode> parent = EditorBase::GetNodeLocation(child, &offset);
     aSelection->Collapse(parent,offset);
   }
+  ClearCachedStyles();
   return NS_OK;
 }
 
 /**
  * ReturnInListItem: do the right thing for returns pressed in list items
  */
 nsresult
 HTMLEditRules::ReturnInListItem(Selection& aSelection,
@@ -6578,16 +6551,19 @@ HTMLEditRules::ReturnInListItem(Selectio
       NS_ENSURE_SUCCESS(rv, rv);
       rv = aSelection.Collapse(&aListItem, 0);
       NS_ENSURE_SUCCESS(rv, rv);
     } else {
       // Otherwise kill this item
       rv = htmlEditor->DeleteNode(&aListItem);
       NS_ENSURE_SUCCESS(rv, rv);
 
+      ClearCachedStyles();
+      htmlEditor->mTypeInState->ClearAllProps();
+
       // Time to insert a paragraph
       nsCOMPtr<Element> pNode =
         htmlEditor->CreateNode(nsGkAtoms::p, listParent, offset + 1);
       NS_ENSURE_STATE(pNode);
 
       // Append a <br> to it
       nsCOMPtr<Element> brNode = htmlEditor->CreateBR(pNode, 0);
       NS_ENSURE_STATE(brNode);
@@ -6626,16 +6602,18 @@ HTMLEditRules::ReturnInListItem(Selectio
       if (isEmptyNode) {
         nsCOMPtr<nsIAtom> nodeAtom = aListItem.NodeInfo()->NameAtom();
         if (nodeAtom == nsGkAtoms::dd || nodeAtom == nsGkAtoms::dt) {
           nsCOMPtr<nsINode> list = aListItem.GetParentNode();
           int32_t itemOffset = list ? list->IndexOf(&aListItem) : -1;
 
           nsIAtom* listAtom = nodeAtom == nsGkAtoms::dt ? nsGkAtoms::dd
                                                         : nsGkAtoms::dt;
+          ClearCachedStyles();
+          htmlEditor->mTypeInState->ClearAllProps();
           nsCOMPtr<Element> newListItem =
             htmlEditor->CreateNode(listAtom, list, itemOffset + 1);
           NS_ENSURE_STATE(newListItem);
           rv = htmlEditor->DeleteNode(&aListItem);
           NS_ENSURE_SUCCESS(rv, rv);
           rv = aSelection.Collapse(newListItem, 0);
           NS_ENSURE_SUCCESS(rv, rv);
 
diff --git a/editor/libeditor/HTMLEditUtils.cpp b/editor/libeditor/HTMLEditUtils.cpp
--- a/editor/libeditor/HTMLEditUtils.cpp
+++ b/editor/libeditor/HTMLEditUtils.cpp
@@ -679,17 +679,17 @@ static const ElementInfo kElements[eHTML
   ELEM(mark, true, true, GROUP_PHRASE, GROUP_INLINE_ELEMENT),
   ELEM(marquee, false, false, GROUP_NONE, GROUP_NONE),
   ELEM(menu, true, true, GROUP_BLOCK, GROUP_LI | GROUP_FLOW_ELEMENT),
   ELEM(menuitem, false, false, GROUP_NONE, GROUP_NONE),
   ELEM(meta, false, false, GROUP_HEAD_CONTENT, GROUP_NONE),
   ELEM(meter, true, false, GROUP_SPECIAL, GROUP_FLOW_ELEMENT),
   ELEM(multicol, false, false, GROUP_NONE, GROUP_NONE),
   ELEM(nav, true, true, GROUP_BLOCK, GROUP_FLOW_ELEMENT),
-  ELEM(nobr, false, false, GROUP_NONE, GROUP_NONE),
+  ELEM(nobr, false, false, GROUP_PHRASE, GROUP_INLINE_ELEMENT),
   ELEM(noembed, false, false, GROUP_NONE, GROUP_NONE),
   ELEM(noframes, true, true, GROUP_BLOCK, GROUP_FLOW_ELEMENT),
   ELEM(noscript, true, true, GROUP_BLOCK, GROUP_FLOW_ELEMENT),
   ELEM(object, true, true, GROUP_SPECIAL | GROUP_BLOCK,
        GROUP_FLOW_ELEMENT | GROUP_OBJECT_CONTENT),
   // XXX Can contain self and ul because editor does sublists illegally.
   ELEM(ol, true, true, GROUP_BLOCK | GROUP_OL_UL,
        GROUP_LI | GROUP_OL_UL),
diff --git a/editor/libeditor/HTMLEditor.cpp b/editor/libeditor/HTMLEditor.cpp
--- a/editor/libeditor/HTMLEditor.cpp
+++ b/editor/libeditor/HTMLEditor.cpp
@@ -294,17 +294,18 @@ HTMLEditor::Init(nsIDOMDocument* aDoc,
     // init the type-in state
     mTypeInState = new TypeInState();
 
     // init the selection listener for image resizing
     mSelectionListenerP = new ResizerSelectionListener(this);
 
     if (!IsInteractionAllowed()) {
       // ignore any errors from this in case the file is missing
-      AddOverrideStyleSheet(NS_LITERAL_STRING("resource://gre/res/EditorOverride.css"));
+      // BlueGriffon uses its own EditorOverride.css
+      //AddOverrideStyleSheet(NS_LITERAL_STRING("resource://gre/res/EditorOverride.css"));
     }
 
     RefPtr<Selection> selection = GetSelection();
     if (selection) {
       nsCOMPtr<nsISelectionListener>listener;
       listener = do_QueryInterface(mTypeInState);
       if (listener) {
         selection->AddSelectionListener(listener);
@@ -2615,21 +2616,16 @@ HTMLEditor::CreateElementWithDefaults(co
       return nullptr;
     }
     newElement->SetAttribute(NS_LITERAL_STRING("border"),
                              NS_LITERAL_STRING("1"), rv);
     if (NS_WARN_IF(rv.Failed())) {
       rv.SuppressException();
       return nullptr;
     }
-  } else if (tagName.EqualsLiteral("td")) {
-    nsresult rv =
-      SetAttributeOrEquivalent(
-        newElement, nsGkAtoms::valign, NS_LITERAL_STRING("top"), true);
-    NS_ENSURE_SUCCESS(rv, nullptr);
   }
   // ADD OTHER TAGS HERE
 
   return newElement.forget();
 }
 
 NS_IMETHODIMP
 HTMLEditor::CreateElementWithDefaults(const nsAString& aTagName,
@@ -3656,17 +3652,17 @@ HTMLEditor::IsTextPropertySetByContent(n
   nsCOMPtr<nsIDOMNode>node = aNode;
 
   while (node) {
     nsCOMPtr<nsIDOMElement>element;
     element = do_QueryInterface(node);
     if (element) {
       nsAutoString tag, value;
       element->GetTagName(tag);
-      if (propName.Equals(tag, nsCaseInsensitiveStringComparator())) {
+      if (propName.IsEmpty() || propName.Equals(tag, nsCaseInsensitiveStringComparator())) {
         bool found = false;
         if (aAttribute && !aAttribute->IsEmpty()) {
           element->GetAttribute(*aAttribute, value);
           if (outValue) {
             *outValue = value;
           }
           if (!value.IsEmpty()) {
             if (!aValue) {
@@ -5272,9 +5268,40 @@ HTMLEditor::IsEditable(nsINode* aNode)
 }
 
 Element*
 HTMLEditor::GetEditorRoot()
 {
   return GetActiveEditingHost();
 }
 
+NS_IMETHODIMP
+HTMLEditor::GetMedium(nsAString & outValue)
+{
+  nsCOMPtr<nsIPresShell> ps = GetPresShell();
+
+  if (ps && ps->GetPresContext())
+  {
+    nsIAtom* medium = ps->GetPresContext()->Medium();
+    if (medium == nsGkAtoms::screen)
+      outValue.AssignLiteral("screen");
+    else
+      outValue.AssignLiteral("print");
+    return NS_OK;
+  }
+  return NS_ERROR_FAILURE;
+}
+
+NS_IMETHODIMP
+HTMLEditor::SetMedium(const nsAString& aMedium)
+{
+  nsCOMPtr<nsIPresShell> ps = GetPresShell();
+
+  if (ps && ps->GetPresContext())
+  {
+    ps->GetPresContext()->SetMedium(aMedium);
+    return NS_OK;
+  }
+  return NS_ERROR_FAILURE;
+}
+
 } // namespace mozilla
+
diff --git a/editor/libeditor/HTMLEditor.h b/editor/libeditor/HTMLEditor.h
--- a/editor/libeditor/HTMLEditor.h
+++ b/editor/libeditor/HTMLEditor.h
@@ -701,17 +701,18 @@ protected:
                                        int32_t aStartOffset,
                                        int32_t aEndOffset,
                                        nsIAtom& aProperty,
                                        const nsAString* aAttribute,
                                        const nsAString& aValue);
   nsresult SetInlinePropertyOnNode(nsIContent& aNode,
                                    nsIAtom& aProperty,
                                    const nsAString* aAttribute,
-                                   const nsAString& aValue);
+                                   const nsAString& aValue,
+                                   bool aAvoidNestingForCSS);
 
   nsresult PromoteInlineRange(nsRange& aRange);
   nsresult PromoteRangeIfStartsOrEndsInNamedAnchor(nsRange& aRange);
   nsresult SplitStyleAboveRange(nsRange* aRange,
                                 nsIAtom* aProperty,
                                 const nsAString* aAttribute);
   nsresult SplitStyleAbovePoint(nsCOMPtr<nsINode>* aNode, int32_t* aOffset,
                                 nsIAtom* aProperty,
@@ -1015,17 +1016,18 @@ public:
 private:
   bool IsSimpleModifiableNode(nsIContent* aContent,
                               nsIAtom* aProperty,
                               const nsAString* aAttribute,
                               const nsAString* aValue);
   nsresult SetInlinePropertyOnNodeImpl(nsIContent& aNode,
                                        nsIAtom& aProperty,
                                        const nsAString* aAttribute,
-                                       const nsAString& aValue);
+                                       const nsAString& aValue,
+                                       bool aAvoidNestingForCSS);
   typedef enum { eInserted, eAppended } InsertedOrAppended;
   void DoContentInserted(nsIDocument* aDocument, nsIContent* aContainer,
                          nsIContent* aChild, int32_t aIndexInContainer,
                          InsertedOrAppended aInsertedOrAppended);
   already_AddRefed<Element> GetElementOrParentByTagName(
                               const nsAString& aTagName, nsINode* aNode);
   already_AddRefed<Element> CreateElementWithDefaults(
                               const nsAString& aTagName);
diff --git a/editor/libeditor/HTMLEditorDataTransfer.cpp b/editor/libeditor/HTMLEditorDataTransfer.cpp
--- a/editor/libeditor/HTMLEditorDataTransfer.cpp
+++ b/editor/libeditor/HTMLEditorDataTransfer.cpp
@@ -1224,24 +1224,50 @@ HTMLEditor::InsertFromTransferable(nsITr
           nsAutoCString text;
           textDataObj->GetData(text);
           NS_ASSERTION(text.Length() <= len, "Invalid length!");
           stuffToPaste.Assign(NS_ConvertUTF8toUTF16(Substring(text, 0, len)));
         }
       }
 
       if (!stuffToPaste.IsEmpty()) {
+
+        // Find where the <body> tag starts.
+        nsAString::const_iterator beginbody, endbody;
+        stuffToPaste.BeginReading(beginbody);
+        stuffToPaste.EndReading(endbody);
+        bool foundbody = CaseInsensitiveFindInReadable(NS_LITERAL_STRING("<body"),
+                                                         beginbody, endbody);
+        nsAutoString realStuffToPaste;
+        if (foundbody) {
+          nsAString::const_iterator endstartbody;
+          stuffToPaste.EndReading(endstartbody);
+         bool foundstartbody = CaseInsensitiveFindInReadable(NS_LITERAL_STRING(">"),
+                                                              endbody, endstartbody);
+          if (!foundstartbody)
+            return NS_ERROR_FAILURE;
+
+          nsAString::const_iterator beginclosebody, endclosebody;
+          stuffToPaste.BeginReading(beginclosebody);
+          stuffToPaste.EndReading(endclosebody);
+
+          // Find the index before "</body>"
+          CaseInsensitiveFindInReadable(NS_LITERAL_STRING("</body>"), beginclosebody, endclosebody);
+          realStuffToPaste.Assign(Substring(endstartbody, beginclosebody));
+        }
+        else
+          realStuffToPaste.Assign(stuffToPaste);
         AutoEditBatch beginBatching(this);
         if (bestFlavor.EqualsLiteral(kHTMLMime)) {
-          rv = DoInsertHTMLWithContext(stuffToPaste,
+          rv = DoInsertHTMLWithContext(realStuffToPaste,
                                        aContextStr, aInfoStr, flavor,
                                        aSourceDoc,
                                        aDestinationNode, aDestOffset,
                                        aDoDeleteSelection,
-                                       isSafe);
+                                       true);
         } else {
           rv = InsertTextAt(stuffToPaste, aDestinationNode, aDestOffset, aDoDeleteSelection);
         }
       }
     }
   }
 
   // Try to scroll the selection into view if the paste succeeded
diff --git a/editor/libeditor/HTMLEditorEventListener.cpp b/editor/libeditor/HTMLEditorEventListener.cpp
--- a/editor/libeditor/HTMLEditorEventListener.cpp
+++ b/editor/libeditor/HTMLEditorEventListener.cpp
@@ -62,20 +62,67 @@ HTMLEditorEventListener::MouseUp(nsIDOMM
   NS_ENSURE_TRUE(target, NS_ERROR_NULL_POINTER);
   nsCOMPtr<nsIDOMElement> element = do_QueryInterface(target);
 
   int32_t clientX, clientY;
   aMouseEvent->GetClientX(&clientX);
   aMouseEvent->GetClientY(&clientY);
   htmlEditor->MouseUp(clientX, clientY, element);
 
+  bool isShiftKey;
+  rv = aMouseEvent->GetShiftKey(&isShiftKey);
+  NS_ENSURE_SUCCESS(rv, rv);
+  if (htmlEditor->NotifyEditorMouseObservers(EditorBase::kMouseUp,
+                                             clientX, clientY,
+                                             element, isShiftKey)) {
+    nsCOMPtr<nsIDOMEvent> event = do_QueryInterface(aMouseEvent);
+    event->PreventDefault();
+    return NS_OK;
+  }
+
   return EditorEventListener::MouseUp(aMouseEvent);
 }
 
 nsresult
+HTMLEditorEventListener::MouseMove(nsIDOMMouseEvent* aMouseEvent)
+{
+  NS_ENSURE_TRUE(mEditorBase, NS_ERROR_NOT_AVAILABLE);
+
+  if (!aMouseEvent) {
+    //non-ui event passed in.  bad things.
+    return NS_OK;
+  }
+
+  HTMLEditor* htmlEditor = mEditorBase->AsHTMLEditor();
+
+  nsCOMPtr<nsIDOMEventTarget> target;
+  nsCOMPtr<nsIDOMEvent> event = do_QueryInterface(aMouseEvent);
+  nsresult res = event->GetExplicitOriginalTarget(getter_AddRefs(target));
+  NS_ENSURE_SUCCESS(res, res);
+  NS_ENSURE_TRUE(target, NS_ERROR_NULL_POINTER);
+  nsCOMPtr<nsIDOMElement> element = do_QueryInterface(target);
+
+  int32_t clientX, clientY;
+  aMouseEvent->GetClientX(&clientX);
+  aMouseEvent->GetClientY(&clientY);
+
+  bool isShiftKey;
+  res = aMouseEvent->GetShiftKey(&isShiftKey);
+  NS_ENSURE_SUCCESS(res, res);
+  if (htmlEditor->NotifyEditorMouseObservers(EditorBase::kMouseMove,
+                                             clientX, clientY,
+                                             element, isShiftKey)) {
+    event->PreventDefault();
+    return NS_OK;
+  }
+
+  return EditorEventListener::MouseMove(aMouseEvent);
+}
+
+nsresult
 HTMLEditorEventListener::MouseDown(nsIDOMMouseEvent* aMouseEvent)
 {
   if (NS_WARN_IF(!aMouseEvent) || DetachedFromEditor()) {
     return NS_OK;
   }
 
   // Even if it's not acceptable mousedown event (i.e., when mousedown
   // event is fired outside of the active editing host), we need to commit
@@ -92,16 +139,20 @@ HTMLEditorEventListener::MouseDown(nsIDO
   MOZ_ASSERT(htmlEditor);
 
   // Contenteditable should disregard mousedowns outside it.
   // IsAcceptableInputEvent() checks it for a mouse event.
   if (!htmlEditor->IsAcceptableInputEvent(mousedownEvent)) {
     return EditorEventListener::MouseDown(aMouseEvent);
   }
 
+  int32_t clientX, clientY;
+  aMouseEvent->GetClientX(&clientX);
+  aMouseEvent->GetClientY(&clientY);
+
   // Detect only "context menu" click
   // XXX This should be easier to do!
   // But eDOMEvents_contextmenu and eContextMenu is not exposed in any event
   // interface :-(
   int16_t buttonNumber;
   nsresult rv = aMouseEvent->GetButton(&buttonNumber);
   NS_ENSURE_SUCCESS(rv, rv);
 
@@ -202,22 +253,31 @@ HTMLEditorEventListener::MouseDown(nsIDO
     // Prevent bubbling if we changed selection or
     //   for all context clicks
     if (element || isContextClick) {
       aMouseEvent->AsEvent()->PreventDefault();
       return NS_OK;
     }
   } else if (!isContextClick && buttonNumber == 0 && clickCount == 1) {
     // if the target element is an image, we have to display resizers
-    int32_t clientX, clientY;
-    aMouseEvent->GetClientX(&clientX);
-    aMouseEvent->GetClientY(&clientY);
     htmlEditor->MouseDown(clientX, clientY, element, aMouseEvent->AsEvent());
   }
 
+  nsCOMPtr<nsIDOMNode> targetNode = do_QueryInterface(target);
+  bool isShiftKey;
+  rv = aMouseEvent->GetShiftKey(&isShiftKey);
+  NS_ENSURE_SUCCESS(rv, rv);
+  if (htmlEditor->NotifyEditorMouseObservers(EditorBase::kMouseDown,
+                                             clientX, clientY,
+                                             element, isShiftKey)) {
+    nsCOMPtr<nsIDOMEvent> event = do_QueryInterface(aMouseEvent);
+    event->PreventDefault();
+    return NS_OK;
+  }
+
   return EditorEventListener::MouseDown(aMouseEvent);
 }
 
 nsresult
 HTMLEditorEventListener::MouseClick(nsIDOMMouseEvent* aMouseEvent)
 {
   if (NS_WARN_IF(DetachedFromEditor())) {
     return NS_OK;
diff --git a/editor/libeditor/HTMLEditorEventListener.h b/editor/libeditor/HTMLEditorEventListener.h
--- a/editor/libeditor/HTMLEditorEventListener.h
+++ b/editor/libeditor/HTMLEditorEventListener.h
@@ -29,13 +29,14 @@ public:
    * Connect() fails if aEditorBase isn't an HTMLEditor instance.
    */
   virtual nsresult Connect(EditorBase* aEditorBase) override;
 
 protected:
   virtual nsresult MouseDown(nsIDOMMouseEvent* aMouseEvent) override;
   virtual nsresult MouseUp(nsIDOMMouseEvent* aMouseEvent) override;
   virtual nsresult MouseClick(nsIDOMMouseEvent* aMouseEvent) override;
+  virtual nsresult MouseMove(nsIDOMMouseEvent* aMouseEvent) override;
 };
 
 } // namespace mozilla
 
 #endif // #ifndef HTMLEditorEventListener_h
diff --git a/editor/libeditor/HTMLStyleEditor.cpp b/editor/libeditor/HTMLStyleEditor.cpp
--- a/editor/libeditor/HTMLStyleEditor.cpp
+++ b/editor/libeditor/HTMLStyleEditor.cpp
@@ -193,18 +193,20 @@ HTMLEditor::SetInlineProperty(nsIAtom* a
         rv = SetInlinePropertyOnTextNode(*startNode->GetAsText(),
                                          range->StartOffset(),
                                          startNode->Length(), *aProperty,
                                          &aAttribute, aValue);
         NS_ENSURE_SUCCESS(rv, rv);
       }
 
       // Then loop through the list, set the property on each node
+      int32_t listCount = arrayOfNodes.Length();
       for (auto& node : arrayOfNodes) {
-        rv = SetInlinePropertyOnNode(*node, *aProperty, &aAttribute, aValue);
+        rv = SetInlinePropertyOnNode(*node, *aProperty, &aAttribute, aValue,
+                                     (1 == listCount));
         NS_ENSURE_SUCCESS(rv, rv);
       }
 
       // Last check the end parent of the range to see if it needs to be
       // separately handled (it does if it's a text node, due to how the
       // subtree iterator works - it will not have reported it).
       if (endNode && endNode->GetAsText() && IsEditable(endNode)) {
         rv = SetInlinePropertyOnTextNode(*endNode->GetAsText(), 0,
@@ -233,24 +235,27 @@ HTMLEditor::IsSimpleModifiableNode(nsICo
   MOZ_ASSERT(aProperty);
   MOZ_ASSERT_IF(aAttribute, aValue);
 
   nsCOMPtr<dom::Element> element = do_QueryInterface(aContent);
   if (!element) {
     return false;
   }
 
+  uint32_t attrCount = aContent->GetAttrCount();
+  bool noAttr = !attrCount
+                || (attrCount == 1 && aContent->GetAttrNameAt(0)->Equals(nsGkAtoms::mozdirty));
   // First check for <b>, <i>, etc.
-  if (element->IsHTMLElement(aProperty) && !element->GetAttrCount() &&
+  if (element->IsHTMLElement(aProperty) && noAttr &&
       (!aAttribute || aAttribute->IsEmpty())) {
     return true;
   }
 
   // Special cases for various equivalencies: <strong>, <em>, <s>
-  if (!element->GetAttrCount() &&
+  if (noAttr &&
       ((aProperty == nsGkAtoms::b &&
         element->IsHTMLElement(nsGkAtoms::strong)) ||
        (aProperty == nsGkAtoms::i &&
         element->IsHTMLElement(nsGkAtoms::em)) ||
        (aProperty == nsGkAtoms::strike &&
         element->IsHTMLElement(nsGkAtoms::s)))) {
     return true;
   }
@@ -272,17 +277,18 @@ HTMLEditor::IsSimpleModifiableNode(nsICo
     }
   }
 
   // No luck so far.  Now we check for a <span> with a single style=""
   // attribute that sets only the style we're looking for, if this type of
   // style supports it
   if (!mCSSEditUtils->IsCSSEditableProperty(element, aProperty, aAttribute) ||
       !element->IsHTMLElement(nsGkAtoms::span) ||
-      element->GetAttrCount() != 1 ||
+      !(attrCount == 1 || (attrCount == 2 && (element->GetAttrNameAt(0)->Equals(nsGkAtoms::mozdirty) ||
+                                              element->GetAttrNameAt(1)->Equals(nsGkAtoms::mozdirty)))) ||
       !element->HasAttr(kNameSpaceID_None, nsGkAtoms::style)) {
     return false;
   }
 
   // Some CSS styles are not so simple.  For instance, underline is
   // "text-decoration: underline", which decomposes into four different text-*
   // properties.  So for now, we just create a span, add the desired style, and
   // see if it matches.
@@ -352,24 +358,25 @@ HTMLEditor::SetInlinePropertyOnTextNode(
     sibling = GetNextHTMLSibling(text);
     if (IsSimpleModifiableNode(sibling, &aProperty, aAttribute, &aValue)) {
       // Following sib is already right kind of inline node; slide this over
       return MoveNode(text, sibling, 0);
     }
   }
 
   // Reparent the node inside inline node with appropriate {attribute,value}
-  return SetInlinePropertyOnNode(*text, aProperty, aAttribute, aValue);
+  return SetInlinePropertyOnNode(*text, aProperty, aAttribute, aValue, false);
 }
 
 nsresult
 HTMLEditor::SetInlinePropertyOnNodeImpl(nsIContent& aNode,
                                         nsIAtom& aProperty,
                                         const nsAString* aAttribute,
-                                        const nsAString& aValue)
+                                          const nsAString& aValue,
+                                          bool aAvoidNestingForCSS)
 {
   nsCOMPtr<nsIAtom> attrAtom = aAttribute ? NS_Atomize(*aAttribute) : nullptr;
 
   // If this is an element that can't be contained in a span, we have to
   // recurse to its children.
   if (!TagCanContain(*nsGkAtoms::span, aNode)) {
     if (aNode.HasChildren()) {
       nsTArray<OwningNonNull<nsIContent>> arrayOfNodes;
@@ -381,17 +388,17 @@ HTMLEditor::SetInlinePropertyOnNodeImpl(
         if (IsEditable(child) && !IsEmptyTextNode(this, child)) {
           arrayOfNodes.AppendElement(*child);
         }
       }
 
       // Then loop through the list, set the property on each node.
       for (auto& node : arrayOfNodes) {
         nsresult rv = SetInlinePropertyOnNode(node, aProperty, aAttribute,
-                                              aValue);
+                                              aValue, false);
         NS_ENSURE_SUCCESS(rv, rv);
       }
     }
     return NS_OK;
   }
 
   // First check if there's an adjacent sibling we can put our node into.
   nsCOMPtr<nsIContent> previousSibling = GetPriorHTMLSibling(&aNode);
@@ -427,18 +434,19 @@ HTMLEditor::SetInlinePropertyOnNodeImpl(
                                                       aAttribute)) ||
                 // bgcolor is always done using CSS
                 attrAtom == nsGkAtoms::bgcolor;
 
   if (useCSS) {
     nsCOMPtr<dom::Element> tmp;
     // We only add style="" to <span>s with no attributes (bug 746515).  If we
     // don't have one, we need to make one.
-    if (aNode.IsHTMLElement(nsGkAtoms::span) &&
-        !aNode.AsElement()->GetAttrCount()) {
+    if (aNode.IsElement() &&
+        (aAvoidNestingForCSS ||
+         (aNode.AsElement()->IsHTMLElement(nsGkAtoms::span) && !aNode.AsElement()->GetAttrCount()))) {
       tmp = aNode.AsElement();
     } else {
       tmp = InsertContainerAbove(&aNode, nsGkAtoms::span);
       NS_ENSURE_STATE(tmp);
     }
 
     // Add the CSS styles corresponding to the HTML style request
     mCSSEditUtils->SetCSSEquivalentToHTMLStyle(tmp,
@@ -461,30 +469,31 @@ HTMLEditor::SetInlinePropertyOnNodeImpl(
 
   return NS_OK;
 }
 
 nsresult
 HTMLEditor::SetInlinePropertyOnNode(nsIContent& aNode,
                                     nsIAtom& aProperty,
                                     const nsAString* aAttribute,
-                                    const nsAString& aValue)
+                                      const nsAString& aValue,
+                                      bool aAvoidNestingForCSS)
 {
   nsCOMPtr<nsIContent> previousSibling = aNode.GetPreviousSibling(),
                        nextSibling = aNode.GetNextSibling();
   NS_ENSURE_STATE(aNode.GetParentNode());
   OwningNonNull<nsINode> parent = *aNode.GetParentNode();
 
   nsresult rv = RemoveStyleInside(aNode, &aProperty, aAttribute);
   NS_ENSURE_SUCCESS(rv, rv);
 
   if (aNode.GetParentNode()) {
     // The node is still where it was
     return SetInlinePropertyOnNodeImpl(aNode, aProperty,
-                                       aAttribute, aValue);
+                                       aAttribute, aValue, aAvoidNestingForCSS);
   }
 
   // It's vanished.  Use the old siblings for reference to construct a
   // list.  But first, verify that the previous/next siblings are still
   // where we expect them; otherwise we have to give up.
   if ((previousSibling && previousSibling->GetParentNode() != parent) ||
       (nextSibling && nextSibling->GetParentNode() != parent)) {
     return NS_ERROR_UNEXPECTED;
@@ -494,17 +503,17 @@ HTMLEditor::SetInlinePropertyOnNode(nsIC
     ? previousSibling->GetNextSibling() : parent->GetFirstChild();
   for (; cur && cur != nextSibling; cur = cur->GetNextSibling()) {
     if (IsEditable(cur)) {
       nodesToSet.AppendElement(*cur);
     }
   }
 
   for (auto& node : nodesToSet) {
-    rv = SetInlinePropertyOnNodeImpl(node, aProperty, aAttribute, aValue);
+    rv = SetInlinePropertyOnNodeImpl(node, aProperty, aAttribute, aValue, false);
     NS_ENSURE_SUCCESS(rv, rv);
   }
 
   return NS_OK;
 }
 
 nsresult
 HTMLEditor::SplitStyleAboveRange(nsRange* inRange,
@@ -1312,17 +1321,17 @@ HTMLEditor::RemoveInlinePropertyImpl(nsI
                   CSSEditUtils::eComputed) &&
               // startNode's computed style indicates the CSS equivalence to
               // the HTML style to remove is applied; but we found no element
               // in the ancestors of startNode carrying specified styles;
               // assume it comes from a rule and let's try to insert a span
               // "inverting" the style
               mCSSEditUtils->IsCSSInvertible(*aProperty, aAttribute)) {
             NS_NAMED_LITERAL_STRING(value, "-moz-editor-invert-value");
-            SetInlinePropertyOnNode(node, *aProperty, aAttribute, value);
+            SetInlinePropertyOnNode(node, *aProperty, aAttribute, value, false);
           }
         }
       }
     }
   }
   if (!cancel) {
     // Post-process
     rv = rules->DidDoAction(selection, &ruleInfo, rv);
diff --git a/editor/libeditor/HTMLTableEditor.cpp b/editor/libeditor/HTMLTableEditor.cpp
--- a/editor/libeditor/HTMLTableEditor.cpp
+++ b/editor/libeditor/HTMLTableEditor.cpp
@@ -2311,42 +2311,90 @@ HTMLEditor::MergeCells(nsCOMPtr<nsIDOMEl
   nsCOMPtr<dom::Element> targetCell = do_QueryInterface(aTargetCell);
   nsCOMPtr<dom::Element> cellToMerge = do_QueryInterface(aCellToMerge);
   NS_ENSURE_TRUE(targetCell && cellToMerge, NS_ERROR_NULL_POINTER);
 
   // Prevent rules testing until we're done
   AutoRules beginRulesSniffing(this, EditAction::deleteNode, nsIEditor::eNext);
 
   // Don't need to merge if cell is empty
+  nsresult res;
   if (!IsEmptyCell(cellToMerge)) {
     // Get index of last child in target cell
     // If we fail or don't have children,
     //  we insert at index 0
     int32_t insertIndex = 0;
 
     // Start inserting just after last child
     uint32_t len = targetCell->GetChildCount();
-    if (len == 1 && IsEmptyCell(targetCell)) {
+    bool isTargetCellEmpty = IsEmptyCell(targetCell);
+    if (len == 1 && isTargetCellEmpty) {
       // Delete the empty node
       nsIContent* cellChild = targetCell->GetFirstChild();
       nsresult rv = DeleteNode(cellChild->AsDOMNode());
       NS_ENSURE_SUCCESS(rv, rv);
       insertIndex = 0;
     } else {
       insertIndex = (int32_t)len;
+      // Insert a break at the beginning of source cell if we need it.
+      // We need it if both cells are non-empty from a content point of view.
+      if (!isTargetCellEmpty) {
+        // Let's look for the last child of the target cell that is not
+        // an empty text node
+        nsIContent* targetCellChild = targetCell->GetLastChild();
+        nsCOMPtr<nsIDOMNode> targetCellChildNode = targetCellChild->AsDOMNode();
+        bool isEmptyTextNode = false;
+        while (targetCellChildNode
+               && EditorBase::IsTextNode(targetCellChildNode)
+               && (NS_SUCCEEDED(IsEmptyNode(targetCellChildNode, &isEmptyTextNode)) && isEmptyTextNode)) {
+          res = targetCellChildNode->GetPreviousSibling(getter_AddRefs(targetCellChildNode));
+          NS_ENSURE_SUCCESS(res, res);
+        }
+        // we know targetCellChildNode cannot be null at this point because
+        // we tested isTargetCellEmpty above...
+        bool isBlock = false;
+        NodeIsBlock(targetCellChildNode, &isBlock);
+        // Lets check if targetCellChildNode is a block or a break
+        if (!isBlock && !TextEditUtils::IsBreak(targetCellChildNode)) {
+          // It's not, we may have to insert a break...
+          // Let's look for the first child of the source cell that is not
+          // an empty text node
+          nsCOMPtr<nsIDOMNode> cellChildNode = cellToMerge->GetFirstChild()->AsDOMNode();
+          while (cellChildNode
+                 && EditorBase::IsTextNode(cellChildNode)
+                 && (NS_SUCCEEDED(IsEmptyNode(cellChildNode, &isEmptyTextNode)) && isEmptyTextNode)) {
+            res = cellChildNode->GetPreviousSibling(getter_AddRefs(cellChildNode));
+            NS_ENSURE_SUCCESS(res, res);
+          }
+          // we also know cellChildNode cannot be null at this point because
+          // we tested IsEmptyCell(cellToMerge) above...
+          isBlock = false;
+          NodeIsBlock(cellChildNode, &isBlock);
+          // Lets check if targetCellChildNode is a block or a break
+          if (!isBlock && !TextEditUtils::IsBreak(cellChildNode)) {
+            // so both last visible node of target cell and first visible node of
+            // source cell are not blocks or breaks. We need to insert
+            // a break as first child of source cell so the merged contents
+            // are separated by that break.
+            nsCOMPtr<nsIDOMNode> brNode;
+            res = CreateBR(aCellToMerge, 0, address_of(brNode));
+            NS_ENSURE_SUCCESS(res, res);
+          }
+        }
+      }
     }
 
     // Move the contents
     while (cellToMerge->HasChildren()) {
       nsCOMPtr<nsIDOMNode> cellChild = cellToMerge->GetLastChild()->AsDOMNode();
-      nsresult rv = DeleteNode(cellChild);
-      NS_ENSURE_SUCCESS(rv, rv);
-
-      rv = InsertNode(cellChild, aTargetCell, insertIndex);
-      NS_ENSURE_SUCCESS(rv, rv);
+      res = DeleteNode(cellChild);
+      NS_ENSURE_SUCCESS(res, res);
+
+      res = InsertNode(cellChild, aTargetCell, insertIndex);
+      NS_ENSURE_SUCCESS(res, res);
     }
   }
 
   // Delete cells whose contents were moved
   if (aDeleteCellToMerge) {
     return DeleteNode(aCellToMerge);
   }
 
@@ -2717,17 +2765,17 @@ HTMLEditor::GetCellDataAt(nsIDOMElement*
   }
 
   nsTableWrapperFrame* tableFrame = GetTableFrame(aTable);
   NS_ENSURE_TRUE(tableFrame, NS_ERROR_FAILURE);
 
   nsTableCellFrame* cellFrame =
     tableFrame->GetCellFrameAt(aRowIndex, aColIndex);
   if (!cellFrame) {
-    return NS_ERROR_FAILURE;
+    return NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND;
   }
 
   *aIsSelected = cellFrame->IsSelected();
   cellFrame->GetRowIndex(*aStartRowIndex);
   cellFrame->GetColIndex(*aStartColIndex);
   *aRowSpan = cellFrame->GetRowSpan();
   *aColSpan = cellFrame->GetColSpan();
   *aActualRowSpan = tableFrame->GetEffectiveRowSpanAt(aRowIndex, aColIndex);
diff --git a/editor/libeditor/TextEditorDataTransfer.cpp b/editor/libeditor/TextEditorDataTransfer.cpp
--- a/editor/libeditor/TextEditorDataTransfer.cpp
+++ b/editor/libeditor/TextEditorDataTransfer.cpp
@@ -453,20 +453,17 @@ TextEditor::IsSafeToInsertData(nsIDOMDoc
   nsCOMPtr<nsIDocument> destdoc = GetDocument();
   NS_ASSERTION(destdoc, "Where is our destination doc?");
   nsCOMPtr<nsIDocShellTreeItem> dsti = destdoc->GetDocShell();
   nsCOMPtr<nsIDocShellTreeItem> root;
   if (dsti) {
     dsti->GetRootTreeItem(getter_AddRefs(root));
   }
   nsCOMPtr<nsIDocShell> docShell = do_QueryInterface(root);
-  uint32_t appType;
-  if (docShell && NS_SUCCEEDED(docShell->GetAppType(&appType))) {
-    isSafe = appType == nsIDocShell::APP_TYPE_EDITOR;
-  }
+
   if (!isSafe && aSourceDoc) {
     nsCOMPtr<nsIDocument> srcdoc = do_QueryInterface(aSourceDoc);
     NS_ASSERTION(srcdoc, "Where is our source doc?");
 
     nsIPrincipal* srcPrincipal = srcdoc->NodePrincipal();
     nsIPrincipal* destPrincipal = destdoc->NodePrincipal();
     NS_ASSERTION(srcPrincipal && destPrincipal, "How come we don't have a principal?");
     srcPrincipal->Subsumes(destPrincipal, &isSafe);
diff --git a/editor/libeditor/WSRunObject.cpp b/editor/libeditor/WSRunObject.cpp
--- a/editor/libeditor/WSRunObject.cpp
+++ b/editor/libeditor/WSRunObject.cpp
@@ -476,17 +476,17 @@ WSRunObject::PriorVisibleNode(nsINode* a
   // anything return start of ws.
   MOZ_ASSERT(aNode && outVisNode && outVisOffset && outType);
 
   WSFragment* run;
   FindRun(aNode, aOffset, &run, false);
 
   // Is there a visible run there or earlier?
   for (; run; run = run->mLeft) {
-    if (run->mType == WSType::normalWS) {
+    if (run->mType == WSType::normalWS || run->mType == WSType::trailingWS) {
       WSPoint point = GetCharBefore(aNode, aOffset);
       // When it's a non-empty text node, return it.
       if (point.mTextNode && point.mTextNode->Length()) {
         *outVisNode = point.mTextNode;
         *outVisOffset = point.mOffset + 1;
         if (nsCRT::IsAsciiSpace(point.mChar) || point.mChar == nbsp) {
           *outType = WSType::normalWS;
         } else {
diff --git a/editor/moz.build b/editor/moz.build
--- a/editor/moz.build
+++ b/editor/moz.build
@@ -13,16 +13,17 @@ DIRS += [
 
 XPIDL_SOURCES += [
     'nsIContentFilter.idl',
     'nsIDocumentStateListener.idl',
     'nsIEditActionListener.idl',
     'nsIEditor.idl',
     'nsIEditorIMESupport.idl',
     'nsIEditorMailSupport.idl',
+    'nsIEditorMouseObserver.idl',
     'nsIEditorObserver.idl',
     'nsIEditorSpellCheck.idl',
     'nsIEditorStyleSheets.idl',
     'nsIEditorUtils.idl',
     'nsIHTMLAbsPosEditor.idl',
     'nsIHTMLEditor.idl',
     'nsIHTMLInlineTableEditor.idl',
     'nsIHTMLObjectResizeListener.idl',
diff --git a/editor/nsIEditor.idl b/editor/nsIEditor.idl
--- a/editor/nsIEditor.idl
+++ b/editor/nsIEditor.idl
@@ -15,28 +15,29 @@ interface nsISelectionController;
 interface nsIDocumentStateListener;
 interface nsIOutputStream;
 interface nsITransactionManager;
 interface nsITransaction;
 interface nsIEditorObserver;
 interface nsIEditActionListener;
 interface nsIInlineSpellChecker;
 interface nsITransferable;
+interface nsIEditorMouseObserver;
 
 %{C++
 namespace mozilla {
 namespace widget {
 struct IMEState;
 } // namespace widget
 } // namespace mozilla
 %}
 
 native IMEState(mozilla::widget::IMEState);
 
-[scriptable, uuid(094be624-f0bf-400f-89e2-6a84baab9474)]
+[scriptable, uuid(EE1D66E6-1F4E-4A70-AEA9-23E1EFC17E92)]
 interface nsIEditor  : nsISupports
 {
 %{C++
   typedef short EDirection;
   typedef short EStripWrappers;
 %}
   const short eNone = 0;
   const short eNext = 1;
@@ -531,16 +532,19 @@ interface nsIEditor  : nsISupports
    */
 
   /** add an EditorObserver to the editors list of observers. */
   void addEditorObserver(in nsIEditorObserver observer);
 
   /** Remove an EditorObserver from the editor's list of observers. */
   void removeEditorObserver(in nsIEditorObserver observer);
 
+  void addEditorMouseObserver(in nsIEditorMouseObserver observer);
+  void removeEditorMouseObserver(in nsIEditorMouseObserver observer);
+
   /** add an EditActionListener to the editors list of listeners. */
   void addEditActionListener(in nsIEditActionListener listener);
 
   /** Remove an EditActionListener from the editor's list of listeners. */
   void removeEditActionListener(in nsIEditActionListener listener);
 
   /** Add a DocumentStateListener to the editors list of doc state listeners. */
   void addDocumentStateListener(in nsIDocumentStateListener listener);
diff --git a/editor/nsIEditorMouseObserver.idl b/editor/nsIEditorMouseObserver.idl
new file mode 100644
--- /dev/null
+++ b/editor/nsIEditorMouseObserver.idl
@@ -0,0 +1,17 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "nsISupports.idl"
+#include "domstubs.idl"
+
+
+[scriptable, uuid(7A76F573-7512-4051-BB20-E6E279F26F55)]
+
+interface nsIEditorMouseObserver : nsISupports {
+
+  bool MouseDown(in int32_t aClientX, in int32_t aClientY, in nsIDOMNode aTarget, in boolean aShiftKey);
+  bool MouseUp(in int32_t aClientX, in int32_t aClientY, in nsIDOMNode aTarget, in boolean aShiftKey);
+  bool MouseMove(in int32_t aClientX, in int32_t aClientY, in nsIDOMNode aTarget, in boolean aShiftKey);
+};
diff --git a/editor/nsIHTMLEditor.idl b/editor/nsIHTMLEditor.idl
--- a/editor/nsIHTMLEditor.idl
+++ b/editor/nsIHTMLEditor.idl
@@ -17,17 +17,17 @@ namespace mozilla {
 namespace dom {
 class Element;
 }
 }
 %}
 
 [ptr] native Element (mozilla::dom::Element);
 
-[scriptable, uuid(87ee993e-985f-4a43-a974-0d9512da2fb0)]
+[scriptable, uuid(BFA533D9-358C-47CC-92FF-E89D5263D264)]
 interface nsIHTMLEditor : nsISupports
 {
 %{C++
   typedef short EAlignment;
 %}
 
   // used by GetAlignment()
   const short eLeft = 0;
@@ -487,16 +487,19 @@ interface nsIHTMLEditor : nsISupports
   /**
    * A boolean which is true is the HTMLEditor has been instantiated
    * with CSS knowledge and if the CSS pref is currently checked
    *
    * @return    true if CSS handled and enabled
    */
   attribute boolean isCSSEnabled;
 
+  AString getMedium();
+  void setMedium(in AString aMedium);
+
   /**
    * Add listener for insertion override
    * @param inFilter  function which callers want called during insertion
    */
   void addInsertionListener(in nsIContentFilter inFilter);
 
   /**
    * Remove listener for insertion override
diff --git a/extensions/moz.build b/extensions/moz.build
--- a/extensions/moz.build
+++ b/extensions/moz.build
@@ -1,10 +1,16 @@
 # -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-DIRS += CONFIG['MOZ_EXTENSIONS']
++DIRS += [
++    'svg-edit',
++    'gfd',
++    'fs',
++    'markdown',
++    'op1'
++]
 
 with Files('**'):
     BUG_COMPONENT = ('Core', 'General')
diff --git a/gfx/src/nsColor.cpp b/gfx/src/nsColor.cpp
--- a/gfx/src/nsColor.cpp
+++ b/gfx/src/nsColor.cpp
@@ -210,16 +210,37 @@ bool NS_ColorNameToRGB(const nsAString& 
     if (aResult) {
       *aResult = kColors[id];
     }
     return true;
   }
   return false;
 }
 
+bool NS_RGBToColorName(nscolor aColor, nsAString& aResult)
+{
+  uint8_t a = NS_GET_A(aColor);
+  if (a < 255)
+    return false;
+  uint8_t r = NS_GET_R(aColor);
+  uint8_t g = NS_GET_G(aColor);
+  uint8_t b = NS_GET_B(aColor);
+  uint32_t colorIndex;
+  for (colorIndex = 0; colorIndex < eColorName_COUNT; colorIndex++) {
+    nscolor matchingColor = kColors[colorIndex];
+    if (NS_GET_R(matchingColor) == r
+        && NS_GET_G(matchingColor) == g
+        && NS_GET_B(matchingColor) == b) {
+      aResult.AppendASCII(kColorNames[colorIndex]);
+      return true;
+    }
+  }
+  return false;
+}
+
 // Returns kColorNames, an array of all possible color names, and sets
 // *aSizeArray to the size of that array. Do NOT call free() on this array.
 const char * const * NS_AllColorNames(size_t *aSizeArray)
 {
   *aSizeArray = ArrayLength(kColorNames);
   return kColorNames;
 }
 
diff --git a/gfx/src/nsColor.h b/gfx/src/nsColor.h
--- a/gfx/src/nsColor.h
+++ b/gfx/src/nsColor.h
@@ -100,16 +100,20 @@ bool NS_LooseHexToRGB(const nsString& aB
 
 // There is no function to translate a color to a hex string, because
 // the hex-string syntax does not support transparency.
 
 // Translate a color name to a color. Return true if it parses ok,
 // otherwise return false.
 bool NS_ColorNameToRGB(const nsAString& aBuf, nscolor* aResult);
 
+// Translate a color to a color name. Return true if it parses ok,
+// otherwise return false.
+bool NS_RGBToColorName(nscolor aColor, nsAString& aResult);
+
 // Returns an array of all possible color names, and sets
 // *aSizeArray to the size of that array. Do NOT call |free()| on this array.
 const char * const * NS_AllColorNames(size_t *aSizeArray);
 
 // function to convert from HSL color space to RGB color space
 // the float parameters are all expected to be in the range 0-1
 nscolor NS_HSL2RGB(float h, float s, float l);
 
diff --git a/image/imgICache.idl b/image/imgICache.idl
--- a/image/imgICache.idl
+++ b/image/imgICache.idl
@@ -14,27 +14,29 @@ interface nsIURI;
 
 /**
  * imgICache interface
  *
  * @author Stuart Parmenter <pavlov@netscape.com>
  * @version 0.1
  * @see imagelib2
  */
-[scriptable, builtinclass, uuid(bfdf23ff-378e-402e-8a6c-840f0c82b6c3)]
+[scriptable, builtinclass, uuid(862388D5-EB14-4E0D-931C-F4FAD05FB5F2)]
 interface imgICache : nsISupports
 {
   /**
    * Evict images from the cache.
    *
    * @param chrome If TRUE,  evict only chrome images.
    *               If FALSE, evict everything except chrome images.
    */
   void clearCache(in boolean chrome);
 
+  void removeEntry(in nsIURI uri, in nsIDOMDocument doc);
+
   /**
    * Find Properties
    * Used to get properties such as 'type' and 'content-disposition'
    * 'type' is a nsISupportsCString containing the images' mime type such as
    * 'image/png'
    * 'content-disposition' will be a nsISupportsCString containing the header
    * If you call this before any data has been loaded from a URI, it will
    * succeed, but come back empty.
diff --git a/image/imgLoader.cpp b/image/imgLoader.cpp
--- a/image/imgLoader.cpp
+++ b/image/imgLoader.cpp
@@ -1361,16 +1361,37 @@ imgLoader::ClearCache(bool chrome)
   if (chrome) {
     return ClearChromeImageCache();
   }
   return ClearImageCache();
 
 }
 
 NS_IMETHODIMP
+imgLoader::RemoveEntry(nsIURI* aURI, nsIDOMDocument* aDOMDoc)
+{
+  OriginAttributes attrs;
+  nsCOMPtr<nsIDocument> doc = do_QueryInterface(aDOMDoc);
+  if (doc) {
+    nsCOMPtr<nsIPrincipal> principal = doc->NodePrincipal();
+    if (principal) {
+      attrs = principal->OriginAttributesRef();
+    }
+  }
+
+  nsresult rv;
+  ImageCacheKey key(aURI, attrs, doc, rv);
+  if (aURI && RemoveFromCache(key)) {
+    return NS_OK;
+  }
+
+  return NS_ERROR_NOT_AVAILABLE;
+}
+
+NS_IMETHODIMP
 imgLoader::FindEntryProperties(nsIURI* uri,
                                nsIDOMDocument* aDOMDoc,
                                nsIProperties** _retval)
 {
   *_retval = nullptr;
 
   nsCOMPtr<nsIDocument> doc = do_QueryInterface(aDOMDoc);
 
diff --git a/layout/base/nsPresContext.cpp b/layout/base/nsPresContext.cpp
--- a/layout/base/nsPresContext.cpp
+++ b/layout/base/nsPresContext.cpp
@@ -2147,16 +2147,30 @@ nsPresContext::SetPaginatedScrolling(boo
 
 void
 nsPresContext::SetPrintSettings(nsIPrintSettings *aPrintSettings)
 {
   if (mMedium == nsGkAtoms::print)
     mPrintSettings = aPrintSettings;
 }
 
+void
+nsPresContext::SetMedium(const nsAString& aMedium)
+{
+  if (aMedium.EqualsLiteral("screen")) {
+    mMedium = nsGkAtoms::screen;
+    mType =  eContext_Galley;
+  } else {
+    mMedium = nsGkAtoms::print;
+    mType =  eContext_PageLayout;
+    mPaginated = true;
+  }
+  MediaFeatureValuesChanged(eRestyle_ForceDescendants, NS_STYLE_HINT_REFLOW);
+}
+
 bool
 nsPresContext::EnsureVisible()
 {
   nsCOMPtr<nsIDocShell> docShell(mContainer);
   if (docShell) {
     nsCOMPtr<nsIContentViewer> cv;
     docShell->GetContentViewer(getter_AddRefs(cv));
     // Make sure this is the content viewer we belong with
diff --git a/layout/base/nsPresContext.h b/layout/base/nsPresContext.h
--- a/layout/base/nsPresContext.h
+++ b/layout/base/nsPresContext.h
@@ -326,16 +326,17 @@ public:
   /**
    * Get medium of presentation
    */
   nsIAtom* Medium() {
     if (!mIsEmulatingMedia)
       return mMedium;
     return mMediaEmulated;
   }
+  void SetMedium(const nsAString& aMedium);
 
   /*
    * Render the document as if being viewed on a device with the specified
    * media type.
    */
   void EmulateMedium(const nsAString& aMediaType);
 
   /*
diff --git a/layout/forms/nsColorControlFrame.cpp b/layout/forms/nsColorControlFrame.cpp
--- a/layout/forms/nsColorControlFrame.cpp
+++ b/layout/forms/nsColorControlFrame.cpp
@@ -96,16 +96,18 @@ nsColorControlFrame::AppendAnonymousCont
 nsresult
 nsColorControlFrame::UpdateColor()
 {
   // Get the color from the "value" property of our content; it will return the
   // default color (through the sanitization algorithm) if there is none.
   nsAutoString color;
   HTMLInputElement* elt = HTMLInputElement::FromContent(mContent);
   elt->GetValue(color, CallerType::System);
+  if (color.IsEmpty())
+    return NS_OK;
   MOZ_ASSERT(!color.IsEmpty(),
              "Content node's GetValue() should return a valid color string "
              "(the default color, in case no valid color is set)");
 
   // Set the background-color style property of the swatch element to this color
   return mColorContent->SetAttr(kNameSpaceID_None, nsGkAtoms::style,
       NS_LITERAL_STRING("background-color:") + color, true);
 }
diff --git a/layout/style/Loader.cpp b/layout/style/Loader.cpp
--- a/layout/style/Loader.cpp
+++ b/layout/style/Loader.cpp
@@ -1120,17 +1120,18 @@ Loader::CreateSheet(nsIURI* aURI,
       if (cache && cache->IsEnabled()) {
         sheet = cache->GetStyleSheet(aURI, GetStyleBackendType());
         LOG(("  From XUL cache: %p", sheet.get()));
       }
     }
 #endif
 
     bool fromCompleteSheets = false;
-    if (!sheet) {
+    //XXX BlueGriffon forces reload of stylesheets each time we need them
+    if (false /*!sheet*/) {
       // Then our per-document complete sheets.
       URIPrincipalReferrerPolicyAndCORSModeHashKey key(aURI, aLoaderPrincipal, aCORSMode, aReferrerPolicy);
 
       StyleSheet* completeSheet = nullptr;
       mSheets->mCompleteSheets.Get(&key, &completeSheet);
       sheet = completeSheet;
       LOG(("  From completed: %p", sheet.get()));
 
diff --git a/layout/style/nsCSSParser.cpp b/layout/style/nsCSSParser.cpp
--- a/layout/style/nsCSSParser.cpp
+++ b/layout/style/nsCSSParser.cpp
@@ -57,16 +57,18 @@
 #include "mozilla/LookAndFeel.h"
 #include "mozilla/Preferences.h"
 #include "nsRuleData.h"
 #include "mozilla/CSSVariableValues.h"
 #include "mozilla/dom/AnimationEffectReadOnlyBinding.h"
 #include "mozilla/dom/URL.h"
 #include "gfxFontFamilyList.h"
 
+#define BG_CONSOLE_SHOW_INVALID_VARIABLES "bluegriffon.console.showInvalidVariables"
+
 using namespace mozilla;
 using namespace mozilla::css;
 
 typedef nsCSSProps::KTableEntry KTableEntry;
 
 // pref-backed bool values (hooked up in nsCSSParser::Startup)
 static bool sOpentypeSVGEnabled;
 static bool sWebkitPrefixedAliasesEnabled;
@@ -2979,17 +2981,17 @@ CSSParserImpl::ParsePropertyWithVariable
   {
     nsCSSScanner scanner(aValue, 0);
     css::ErrorReporter reporter(scanner, aSheet, mChildLoader, aDocURL);
     InitScanner(scanner, reporter, aDocURL, aBaseURL, aDocPrincipal);
 
     nsCSSTokenSerializationType firstToken, lastToken;
     valid = ResolveValueWithVariableReferences(aVariables, expandedValue,
                                                firstToken, lastToken);
-    if (!valid) {
+    if (!valid && Preferences::GetBool(BG_CONSOLE_SHOW_INVALID_VARIABLES)) {
       NS_ConvertASCIItoUTF16 propName(nsCSSProps::GetStringValue(aPropertyID));
       REPORT_UNEXPECTED(PEInvalidVariableReference);
       REPORT_UNEXPECTED_P(PEValueParsingError, propName);
       if (nsCSSProps::IsInherited(aPropertyID)) {
         REPORT_UNEXPECTED(PEValueWithVariablesFallbackInherit);
       } else {
         REPORT_UNEXPECTED(PEValueWithVariablesFallbackInitial);
       }
diff --git a/layout/style/nsCSSValue.cpp b/layout/style/nsCSSValue.cpp
--- a/layout/style/nsCSSValue.cpp
+++ b/layout/style/nsCSSValue.cpp
@@ -1670,45 +1670,87 @@ nsCSSValue::AppendToString(nsCSSProperty
     nsAutoCString str;
     if (nsCSSProps::GetColorName(GetIntValue(), str)){
       AppendASCIItoUTF16(str, aResult);
     } else {
       MOZ_ASSERT(false, "bad color value");
     }
   }
   else if (IsNumericColorUnit(unit)) {
+    bool outputCssNames = false;
+    nsXPIDLCString colorOutputType;
+    nsresult rv;
+    nsCOMPtr<nsIPrefBranch> prefBranch = do_GetService(NS_PREFSERVICE_CONTRACTID, &rv);
+    if (NS_SUCCEEDED(rv) && prefBranch) {
+      prefBranch->GetBoolPref("bluegriffon.css.colors.names.enabled", &outputCssNames);
+      prefBranch->GetCharPref("bluegriffon.css.colors.type", getter_Copies(colorOutputType));
+    }
+    bool serializeName = false;
+    bool forceHexSerialization = false;
+
     if (aSerialization == eNormalized ||
         unit == eCSSUnit_RGBColor ||
         unit == eCSSUnit_RGBAColor) {
       nscolor color = GetColorValue();
       // For brevity, we omit the alpha component if it's equal to 255 (full
       // opaque). Also, we try to preserve the author-specified function name,
       // unless it's rgba() and we're omitting the alpha component - then we
       // use rgb().
       uint8_t a = NS_GET_A(color);
       bool showAlpha = (a != 255);
 
       if (unit == eCSSUnit_RGBAColor && showAlpha) {
         aResult.AppendLiteral("rgba(");
       } else {
-        aResult.AppendLiteral("rgb(");
+          if (outputCssNames) {
+            nsAutoString nameToSerialize;
+            serializeName = NS_RGBToColorName(color, nameToSerialize);
+            if (serializeName) {
+              aResult.Append(nameToSerialize);
+            }
+            else {
+              if (!PL_strcmp(colorOutputType, "hex")) {
+                forceHexSerialization = true;
+              }
+              else
+                aResult.AppendLiteral("rgb(");
+            }
+          }
+          else {
+            if (!PL_strcmp(colorOutputType, "hex")) {
+              forceHexSerialization = true;
+            }
+            else
+              aResult.AppendLiteral("rgb(");
+          }
       }
 
-      NS_NAMED_LITERAL_STRING(comma, ", ");
-
-      aResult.AppendInt(NS_GET_R(color), 10);
-      aResult.Append(comma);
-      aResult.AppendInt(NS_GET_G(color), 10);
-      aResult.Append(comma);
-      aResult.AppendInt(NS_GET_B(color), 10);
-      if (showAlpha) {
-        aResult.Append(comma);
-        aResult.AppendFloat(nsStyleUtil::ColorComponentToFloat(a));
+        if (!serializeName) {
+          if (forceHexSerialization) {
+            nscolor color = GetColorValue();
+            aResult.Append('#');
+            aResult.AppendPrintf("%02x", NS_GET_R(color));
+            aResult.AppendPrintf("%02x", NS_GET_G(color));
+            aResult.AppendPrintf("%02x", NS_GET_B(color));
+          }
+          else {
+            NS_NAMED_LITERAL_STRING(comma, ", ");
+
+            aResult.AppendInt(NS_GET_R(color), 10);
+            aResult.Append(comma);
+            aResult.AppendInt(NS_GET_G(color), 10);
+            aResult.Append(comma);
+            aResult.AppendInt(NS_GET_B(color), 10);
+            if (showAlpha) {
+              aResult.Append(comma);
+              aResult.AppendFloat(nsStyleUtil::ColorComponentToFloat(a));
+            }
+            aResult.Append(char16_t(')'));
+          }
       }
-      aResult.Append(char16_t(')'));
     } else if (eCSSUnit_HexColor == unit ||
                eCSSUnit_HexColorAlpha == unit) {
       nscolor color = GetColorValue();
       aResult.Append('#');
       aResult.AppendPrintf("%02x", NS_GET_R(color));
       aResult.AppendPrintf("%02x", NS_GET_G(color));
       aResult.AppendPrintf("%02x", NS_GET_B(color));
       if (eCSSUnit_HexColorAlpha == unit) {
diff --git a/netwerk/protocol/res/nsResProtocolHandler.cpp b/netwerk/protocol/res/nsResProtocolHandler.cpp
--- a/netwerk/protocol/res/nsResProtocolHandler.cpp
+++ b/netwerk/protocol/res/nsResProtocolHandler.cpp
@@ -88,13 +88,13 @@ nsResProtocolHandler::ResolveSpecialCase
     }
     aResult.Append(aPath);
     return true;
 }
 
 nsresult
 nsResProtocolHandler::SetSubstitution(const nsACString& aRoot, nsIURI* aBaseURI)
 {
-    MOZ_ASSERT(!aRoot.Equals(""));
+    /*MOZ_ASSERT(!aRoot.Equals(""));
     MOZ_ASSERT(!aRoot.Equals(kAPP));
-    MOZ_ASSERT(!aRoot.Equals(kGRE));
+    MOZ_ASSERT(!aRoot.Equals(kGRE));*/
     return SubstitutingProtocolHandler::SetSubstitution(aRoot, aBaseURI);
 }
diff --git a/parser/htmlparser/nsExpatDriver.cpp b/parser/htmlparser/nsExpatDriver.cpp
--- a/parser/htmlparser/nsExpatDriver.cpp
+++ b/parser/htmlparser/nsExpatDriver.cpp
@@ -957,17 +957,19 @@ nsExpatDriver::HandleError()
   }
 
   // If it didn't initialize, we can't do any logging.
   bool shouldReportError = NS_SUCCEEDED(rv);
 
   if (mSink && shouldReportError) {
     rv = mSink->ReportError(errorText.get(), 
                             sourceText.get(), 
-                            serr, 
+                            serr,
+                            lineNumber,
+                            colNumber,
                             &shouldReportError);
     if (NS_FAILED(rv)) {
       shouldReportError = true;
     }
   }
 
   if (mOriginalSink) {
     nsCOMPtr<nsIDocument> doc = do_QueryInterface(mOriginalSink->GetTarget());
@@ -975,17 +977,17 @@ nsExpatDriver::HandleError()
       shouldReportError = false;
     }
   }
 
   if (shouldReportError) {
     nsCOMPtr<nsIConsoleService> cs
       (do_GetService(NS_CONSOLESERVICE_CONTRACTID));  
     if (cs) {
-      cs->LogMessage(serr);
+      //cs->LogMessage(serr);
     }
   }
 
   return NS_ERROR_HTMLPARSER_STOPPARSING;
 }
 
 void
 nsExpatDriver::ParseBuffer(const char16_t *aBuffer,
diff --git a/parser/htmlparser/nsIExpatSink.idl b/parser/htmlparser/nsIExpatSink.idl
--- a/parser/htmlparser/nsIExpatSink.idl
+++ b/parser/htmlparser/nsIExpatSink.idl
@@ -7,17 +7,17 @@
 interface nsIScriptError;
 
 /**
  * This interface should be implemented by any content sink that wants
  * to get output from expat and do something with it; in other words,
  * by any sink that handles some sort of XML dialect.
  */
 
-[scriptable, uuid(01f681af-0f22-4725-a914-0d396114daf0)]
+[scriptable, uuid(685473DA-41AA-4B20-BC9E-00828B592F76)]
 interface nsIExpatSink : nsISupports 
 {
   /**
    * Called to handle the opening tag of an element.
    * @param aName the fully qualified tagname of the element
    * @param aAtts the array of attribute names and values.  There are
    *        aAttsCount/2 names and aAttsCount/2 values, so the total number of
    *        elements in the array is aAttsCount.  The names and values
@@ -100,10 +100,12 @@ interface nsIExpatSink : nsISupports
    * @param aErrorText  Error message to pass to content sink.
    * @param aSourceText Source text of the document we're parsing.
    * @param aError      Script error object with line number & column number
    *
    * @retval True if the expat driver should report the error.
    */
   boolean ReportError(in wstring aErrorText,
                       in wstring aSourceText,
-                      in nsIScriptError aError);
+                      in nsIScriptError aError,
+                      in unsigned long aLineNumber,
+                      in unsigned long aColNumber);
 }; 
diff --git a/parser/xml/nsSAXXMLReader.cpp b/parser/xml/nsSAXXMLReader.cpp
--- a/parser/xml/nsSAXXMLReader.cpp
+++ b/parser/xml/nsSAXXMLReader.cpp
@@ -301,16 +301,18 @@ nsSAXXMLReader::HandleXMLDeclaration(con
   }
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsSAXXMLReader::ReportError(const char16_t* aErrorText,
                             const char16_t* aSourceText,
                             nsIScriptError *aError,
+                            PRUint32 aLineNumber,
+                            PRUint32 aColNumber,
                             bool *_retval)
 {
   NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
   // Normally, the expat driver should report the error.
   *_retval = true;
 
   if (mErrorHandler) {
     uint32_t lineNumber;
diff --git a/rdf/base/nsRDFContentSink.cpp b/rdf/base/nsRDFContentSink.cpp
--- a/rdf/base/nsRDFContentSink.cpp
+++ b/rdf/base/nsRDFContentSink.cpp
@@ -522,16 +522,18 @@ RDFContentSinkImpl::HandleXMLDeclaration
 {
     return NS_OK;
 }
 
 NS_IMETHODIMP
 RDFContentSinkImpl::ReportError(const char16_t* aErrorText, 
                                 const char16_t* aSourceText,
                                 nsIScriptError *aError,
+                                PRUint32 aLineNumber,
+                                PRUint32 aColNumber,
                                 bool *_retval)
 {
   NS_PRECONDITION(aError && aSourceText && aErrorText, "Check arguments!!!");
 
   // The expat driver should report the error.
   *_retval = true;
   return NS_OK;
 }
diff --git a/toolkit/components/passwordmgr/nsLoginManagerPrompter.js b/toolkit/components/passwordmgr/nsLoginManagerPrompter.js
--- a/toolkit/components/passwordmgr/nsLoginManagerPrompter.js
+++ b/toolkit/components/passwordmgr/nsLoginManagerPrompter.js
@@ -1415,20 +1415,21 @@ LoginManagerPrompter.prototype = {
     propBag.setProperty("timesUsedIncrement", 1);
     this._pwmgr.modifyLogin(login, propBag);
   },
 
   /**
    * Given a content DOM window, returns the chrome window and browser it's in.
    */
   _getChromeWindow(aWindow) {
-    let windows = Services.wm.getEnumerator(null);
+    let windows = Services.wm.getEnumerator("bluegriffon");
     while (windows.hasMoreElements()) {
       let win = windows.getNext();
-      let browser = win.gBrowser.getBrowserForContentWindow(aWindow);
+      // let browser = win.gBrowser.getBrowserForContentWindow(aWindow);
+      let browser = win.EditorUtils.getCurrentTabEditor();
       if (browser) {
         return { win, browser };
       }
     }
     return null;
   },
 
   _getNotifyWindow() {
diff --git a/toolkit/components/telemetry/TelemetryStartup.js b/toolkit/components/telemetry/TelemetryStartup.js
--- a/toolkit/components/telemetry/TelemetryStartup.js
+++ b/toolkit/components/telemetry/TelemetryStartup.js
@@ -31,16 +31,18 @@ TelemetryStartup.prototype.observe = fun
     annotateEnvironment();
     TelemetryEnvironment.registerChangeListener("CrashAnnotator", annotateEnvironment);
     TelemetryEnvironment.onInitialized().then(() => annotateEnvironment());
   }
 }
 
 function annotateEnvironment() {
   try {
+    if (!("@mozilla.org/toolkit/crash-reporter;1" in Cc))
+      return;
     let cr = Cc["@mozilla.org/toolkit/crash-reporter;1"];
     if (cr) {
       let env = JSON.stringify(TelemetryEnvironment.currentEnvironment);
       cr.getService(Ci.nsICrashReporter).annotateCrashReport("TelemetryEnvironment", env);
     }
   } catch (e) {
     // crash reporting not built or disabled? Ignore errors
   }
diff --git a/toolkit/content/widgets/menu.xml b/toolkit/content/widgets/menu.xml
--- a/toolkit/content/widgets/menu.xml
+++ b/toolkit/content/widgets/menu.xml
@@ -219,16 +219,25 @@
       <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop" crop="right"/>
       <children/>
       <xul:hbox class="menu-accel-container" anonid="accel">
         <xul:label class="menu-iconic-accel" xbl:inherits="value=acceltext"/>
       </xul:hbox>
     </content>
   </binding>
 
+  <binding id="menuitem-non-iconic-accel" extends="chrome://global/content/bindings/menu.xml#menuitem">
+    <content>
+      <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop" crop="right"/>
+      <xul:hbox class="menu-accel-container" anonid="accel">
+        <xul:label class="menu-iconic-accel" xbl:inherits="value=acceltext"/>
+      </xul:hbox>
+    </content>
+  </binding>
+
   <binding id="menuitem-iconic-noaccel" extends="chrome://global/content/bindings/menu.xml#menuitem">
     <content>
       <xul:hbox class="menu-iconic-left" align="center" pack="center"
                 xbl:inherits="selected,disabled,checked">
         <xul:image class="menu-iconic-icon" xbl:inherits="src=image,validate,src"/>
       </xul:hbox>
       <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop" crop="right"/>
     </content>
diff --git a/toolkit/content/widgets/menulist.xml b/toolkit/content/widgets/menulist.xml
--- a/toolkit/content/widgets/menulist.xml
+++ b/toolkit/content/widgets/menulist.xml
@@ -540,16 +540,23 @@
                                          else this.removeAttribute('readonly'); return val;"
                                   onget="return this.inputField.readOnly;"/>
 
       <method name="select">
         <body>
           this.inputField.select();
         </body>
       </method>
+
+      <method name="getChild">
+        <parameter name="aChildName"/>
+        <body><![CDATA[
+          return document.getAnonymousElementByAttribute(this, "anonid", aChildName);
+        ]]></body>
+      </method>
     </implementation>
 
     <handlers>
       <handler event="focus" phase="capturing">
         <![CDATA[
           this.setAttribute("focused", "true");
         ]]>
       </handler>
@@ -574,24 +581,40 @@
               // For now, only do this when the outermost menupopup opens.
               this.menuBoxObject.activeChild = this.mSelectedInternal;
           }
         ]]>
       </handler>
 
       <handler event="keypress">
         <![CDATA[
+          if (event.ctrlKey && event.shiftKey)
+            return;
+
+          if (this.getAttribute("bgtype") == "csslength") {
+            var _self = this;
+            if (event.keyCode == KeyEvent.DOM_VK_UP) {
+              IncreaseLength(this, this.getAttribute("units"));
+              if (this.oninput)
+                this.oninput.call(_self);
+              event.preventDefault();
+            }
+            else if (event.keyCode == KeyEvent.DOM_VK_DOWN) {
+              DecreaseLength(this, this.getAttribute("units"), !(this.getAttribute("unsigned") == "true"));
+              if (this.oninput)
+                this.oninput.call(_self);
+              event.preventDefault();
+            }
+          }
           // open popup if key is up arrow, down arrow, or F4
-          if (!event.ctrlKey && !event.shiftKey) {
-            if (event.keyCode == KeyEvent.DOM_VK_UP ||
-                event.keyCode == KeyEvent.DOM_VK_DOWN ||
-                (event.keyCode == KeyEvent.DOM_VK_F4 && !event.altKey)) {
-              event.preventDefault();
-              this.open = true;
-            }
+          else if (event.keyCode == KeyEvent.DOM_VK_UP ||
+                   event.keyCode == KeyEvent.DOM_VK_DOWN ||
+                   (event.keyCode == KeyEvent.DOM_VK_F4 && !event.altKey)) {
+            event.preventDefault();
+            this.open = true;
           }
         ]]>
       </handler>
     </handlers>
   </binding>
 
   <binding id="menulist-description" display="xul:menu"
            extends="chrome://global/content/bindings/menulist.xml#menulist">
diff --git a/toolkit/content/widgets/tree.xml b/toolkit/content/widgets/tree.xml
--- a/toolkit/content/widgets/tree.xml
+++ b/toolkit/content/widgets/tree.xml
@@ -737,17 +737,18 @@
       <handler event="MozSwipeGesture" preventdefault="true">
         <![CDATA[
           // Figure out which row to show
           let targetRow = 0;
 
           // Only handle swipe gestures up and down
           switch (event.direction) {
             case event.DIRECTION_DOWN:
-              targetRow = this.view.rowCount - 1;
+              if (this.view)
+                targetRow = this.view.rowCount - 1;
               // Fall through for actual action
             case event.DIRECTION_UP:
               this.treeBoxObject.ensureRowIsVisible(targetRow);
               break;
           }
         ]]>
       </handler>
       <handler event="select" phase="target"
@@ -1487,35 +1488,36 @@
           <![CDATA[
             // We no longer cache the picker content, remove the old content.
             while (aPopup.childNodes.length > 2)
               aPopup.firstChild.remove();
 
             var refChild = aPopup.firstChild;
 
             var tree = this.parentNode.parentNode;
-            for (var currCol = tree.columns.getFirstColumn(); currCol;
-                 currCol = currCol.getNext()) {
-              // Construct an entry for each column in the row, unless
-              // it is not being shown.
-              var currElement = currCol.element;
-              if (!currElement.hasAttribute("ignoreincolumnpicker")) {
-                var popupChild = document.createElement("menuitem");
-                popupChild.setAttribute("type", "checkbox");
-                var columnName = currElement.getAttribute("display") ||
-                                 currElement.getAttribute("label");
-                popupChild.setAttribute("label", columnName);
-                popupChild.setAttribute("colindex", currCol.index);
-                if (currElement.getAttribute("hidden") != "true")
-                  popupChild.setAttribute("checked", "true");
-                if (currCol.primary)
-                  popupChild.setAttribute("disabled", "true");
-                aPopup.insertBefore(popupChild, refChild);
+            if (tree.columns) // sanity case
+              for (var currCol = tree.columns.getFirstColumn(); currCol;
+                   currCol = currCol.getNext()) {
+                // Construct an entry for each column in the row, unless
+                // it is not being shown.
+                var currElement = currCol.element;
+                if (!currElement.hasAttribute("ignoreincolumnpicker")) {
+                  var popupChild = document.createElement("menuitem");
+                  popupChild.setAttribute("type", "checkbox");
+                  var columnName = currElement.getAttribute("display") ||
+                                   currElement.getAttribute("label");
+                  popupChild.setAttribute("label", columnName);
+                  popupChild.setAttribute("colindex", currCol.index);
+                  if (currElement.getAttribute("hidden") != "true")
+                    popupChild.setAttribute("checked", "true");
+                  if (currCol.primary)
+                    popupChild.setAttribute("disabled", "true");
+                  aPopup.insertBefore(popupChild, refChild);
+                }
               }
-            }
 
             var hidden = !tree.enableColumnDrag;
             const anonids = ["menuseparator", "menuitem"];
             for (var i = 0; i < anonids.length; i++) {
               var element = document.getAnonymousElementByAttribute(this, "anonid", anonids[i]);
               element.hidden = hidden;
             }
           ]]>
diff --git a/toolkit/content/xul.css b/toolkit/content/xul.css
--- a/toolkit/content/xul.css
+++ b/toolkit/content/xul.css
@@ -369,16 +369,20 @@ menubar > menu:empty {
 menuitem {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menuitem");
 }
 
 menuitem.menuitem-iconic {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menuitem-iconic");
 }
 
+menuitem.menuitem-non-iconic-accel {
+  -moz-binding: url("chrome://global/content/bindings/menu.xml#menuitem-non-iconic-accel");
+}
+
 menuitem[description] {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menuitem-iconic-desc-noaccel");
 }
 
 menuitem[type="checkbox"],
 menuitem[type="radio"] {
   -moz-binding: url("chrome://global/content/bindings/menu.xml#menuitem-iconic");
 }
diff --git a/toolkit/mozapps/extensions/content/extensions.js b/toolkit/mozapps/extensions/content/extensions.js
--- a/toolkit/mozapps/extensions/content/extensions.js
+++ b/toolkit/mozapps/extensions/content/extensions.js
@@ -47,16 +47,17 @@ XPCOMUtils.defineLazyPreferenceGetter(th
 const PREF_DISCOVERURL = "extensions.webservice.discoverURL";
 const PREF_DISCOVER_ENABLED = "extensions.getAddons.showPane";
 const PREF_XPI_ENABLED = "xpinstall.enabled";
 const PREF_MAXRESULTS = "extensions.getAddons.maxResults";
 const PREF_GETADDONS_CACHE_ENABLED = "extensions.getAddons.cache.enabled";
 const PREF_GETADDONS_CACHE_ID_ENABLED = "extensions.%ID%.getAddons.cache.enabled";
 const PREF_UI_TYPE_HIDDEN = "extensions.ui.%TYPE%.hidden";
 const PREF_UI_LASTCATEGORY = "extensions.ui.lastCategory";
+const PREF_CLOSE_ADDONS_MANAGER_ON_ESCAPE = "extensions.closeOnEscape";
 
 const LOADING_MSG_DELAY = 100;
 
 const SEARCH_SCORE_MULTIPLIER_NAME = 2;
 const SEARCH_SCORE_MULTIPLIER_DESCRIPTION = 2;
 
 // Use integers so search scores are sortable by nsIXULSortService
 const SEARCH_SCORE_MATCH_WHOLEWORD = 10;
@@ -192,16 +193,27 @@ Object.defineProperty(this, "gIsInitiali
 function initialize(event) {
   // XXXbz this listener gets _all_ load events for all nodes in the
   // document... but relies on not being called "too early".
   if (event.target instanceof XMLStylesheetProcessingInstruction) {
     return;
   }
   document.removeEventListener("load", initialize, true);
 
+  // should we allow the window to close when the user hits the ESC key?
+  let closeOnEscape = false; // default for Firefox 4+
+  try {
+    closeOnEscape = Services.prefs.getBoolPref(PREF_CLOSE_ADDONS_MANAGER_ON_ESCAPE);
+  } catch(e) { }
+  if (!closeOnEscape) {
+    let escapeKeyElt = document.getElementById("escapeKey");
+    if (escapeKeyElt)
+      escapeKeyElt.setAttribute("disabled", "true");
+  }
+
   let globalCommandSet = document.getElementById("globalCommandSet");
   globalCommandSet.addEventListener("command", function(event) {
     gViewController.doCommand(event.target.id);
   });
 
   let viewCommandSet = document.getElementById("viewCommandSet");
   viewCommandSet.addEventListener("commandupdate", function(event) {
     gViewController.updateCommands();
@@ -2986,17 +2998,17 @@ var gListView = {
     this._listBox.insertBefore(item, this._listBox.firstChild);
     this.showEmptyNotice(false);
   },
 
   removeItem(aObj, aIsInstall) {
     let prop = aIsInstall ? "mInstall" : "mAddon";
 
     for (let item of this._listBox.childNodes) {
-      if (item[prop] == aObj) {
+      if (prop in item && item[prop] == aObj) {
         this._listBox.removeChild(item);
         this.showEmptyNotice(this._listBox.itemCount == 0);
         return;
       }
     }
   },
 
   getSelectedAddon() {
diff --git a/toolkit/mozapps/extensions/content/extensions.xul b/toolkit/mozapps/extensions/content/extensions.xul
--- a/toolkit/mozapps/extensions/content/extensions.xul
+++ b/toolkit/mozapps/extensions/content/extensions.xul
@@ -23,16 +23,20 @@
   <xhtml:link rel="shortcut icon"
               href="chrome://mozapps/skin/extensions/extensionGeneric-16.png"/>
 
   <script type="application/javascript"
           src="chrome://mozapps/content/extensions/extensions.js"/>
   <script type="application/javascript"
           src="chrome://global/content/contentAreaUtils.js"/>
 
+  <keyset>
+    <key id="escapeKey" keycode="VK_ESCAPE" oncommand="window.close()"/>
+  </keyset>
+
   <popupset>
     <!-- menu for an addon item -->
     <menupopup id="addonitem-popup">
       <menuitem id="menuitem_showDetails" command="cmd_showItemDetails"
                 default="true" label="&cmd.showDetails.label;"
                 accesskey="&cmd.showDetails.accesskey;"/>
       <menuitem id="menuitem_enableItem" command="cmd_enableItem"
                 label="&cmd.enableAddon.label;"
diff --git a/toolkit/mozapps/extensions/internal/XPIProvider.jsm b/toolkit/mozapps/extensions/internal/XPIProvider.jsm
--- a/toolkit/mozapps/extensions/internal/XPIProvider.jsm
+++ b/toolkit/mozapps/extensions/internal/XPIProvider.jsm
@@ -1361,16 +1361,22 @@ let loadManifestFromRDF = Task.async(fun
   // icons will be filled by the calling function
   addon.icons = {};
   addon.userPermissions = null;
 
   return addon;
 });
 
 function defineSyncGUID(aAddon) {
+  try {
+    // BLUEGRIFFON BMO bug 1277295
+    let storage = Services.storage;
+  }
+  catch(e) {}
+
   // Define .syncGUID as a lazy property which is also settable
   Object.defineProperty(aAddon, "syncGUID", {
     get: () => {
       // Generate random GUID used for Sync.
       let guid = Cc["@mozilla.org/uuid-generator;1"]
           .getService(Ci.nsIUUIDGenerator)
           .generateUUID().toString();
 
diff --git a/toolkit/mozapps/handling/nsContentDispatchChooser.js b/toolkit/mozapps/handling/nsContentDispatchChooser.js
--- a/toolkit/mozapps/handling/nsContentDispatchChooser.js
+++ b/toolkit/mozapps/handling/nsContentDispatchChooser.js
@@ -57,22 +57,54 @@ nsContentDispatchChooser.prototype =
       let string = new SupportsString;
       string.data = text;
       params.appendElement(string, false);
     }
     params.appendElement(aHandler, false);
     params.appendElement(aURI, false);
     params.appendElement(aWindowContext, false);
 
+    // if a modal window is already shown, we need to open the app chooser
+    // as a modal window otherwise it will be unresponsive; bug 687423
+    var wm = Cc["@mozilla.org/appshell/window-mediator;1"].
+               getService(Ci.nsIWindowMediator);
+    var enumerator = wm.getXULWindowEnumerator(null);
+    var inModalState = false;
+    while (!inModalState && enumerator.hasMoreElements()) {
+      var win = enumerator.getNext();
+      var windowDocShell = win.QueryInterface(Ci.nsIXULWindow).docShell;
+  
+      var containedDocShells = windowDocShell.getDocShellEnumerator(
+                                        Ci.nsIDocShellTreeItem.typeChrome,
+                                        Ci.nsIDocShell.ENUMERATE_FORWARDS);
+
+      while (!inModalState && containedDocShells.hasMoreElements()) {
+        // Get the corresponding document for this docshell
+        var childDocShell = containedDocShells.getNext();
+
+        // We don't want it if it's not done loading.
+        if (childDocShell.busyFlags != Ci.nsIDocShell.BUSY_FLAGS_NONE)
+          continue;
+
+        // Ensure that we are only returning true if it is indeed modal
+        var chrome = win.QueryInterface(Ci.nsIInterfaceRequestor).
+                         getInterface(Ci.nsIWebBrowserChrome);
+        if (chrome.isWindowModal()) {
+          inModalState = true;
+        }
+      }
+    }
+
     var ww = Cc["@mozilla.org/embedcomp/window-watcher;1"].
              getService(Ci.nsIWindowWatcher);
     ww.openWindow(window,
                   CONTENT_HANDLING_URL,
                   null,
-                  "chrome,dialog=yes,resizable,centerscreen",
+                  "chrome,dialog=yes,resizable,centerscreen"
+                    + (inModalState ? ",modal" : ""),
                   params);
   },
 
   // nsISupports
 
   QueryInterface: XPCOMUtils.generateQI([Ci.nsIContentDispatchChooser])
 };
 
diff --git a/toolkit/mozapps/installer/packager.mk b/toolkit/mozapps/installer/packager.mk
--- a/toolkit/mozapps/installer/packager.mk
+++ b/toolkit/mozapps/installer/packager.mk
@@ -48,17 +48,17 @@ stage-package: $(MOZ_PKG_MANIFEST) $(MOZ
 		$(if $(MOZ_PACKAGER_MINIFY_JS),--minify-js \
 		  $(addprefix --js-binary ,$(JS_BINARY)) \
 		) \
 		$(if $(JARLOG_DIR),$(addprefix --jarlog ,$(wildcard $(JARLOG_FILE_AB_CD)))) \
 		$(if $(OPTIMIZEJARS),--optimizejars) \
 		$(if $(DISABLE_JAR_COMPRESSION),--disable-compression) \
 		$(MOZ_PKG_MANIFEST) $(DIST) $(DIST)/$(MOZ_PKG_DIR)$(if $(MOZ_PKG_MANIFEST),,$(_BINPATH)) \
 		$(if $(filter omni,$(MOZ_PACKAGER_FORMAT)),$(if $(NON_OMNIJAR_FILES),--non-resource $(NON_OMNIJAR_FILES)))
-	$(PYTHON) $(MOZILLA_DIR)/toolkit/mozapps/installer/find-dupes.py $(DEFINES) $(ACDEFINES) $(MOZ_PKG_DUPEFLAGS) $(DIST)/$(MOZ_PKG_DIR)
+#	$(PYTHON) $(MOZILLA_DIR)/toolkit/mozapps/installer/find-dupes.py $(DEFINES) $(ACDEFINES) $(MOZ_PKG_DUPEFLAGS) $(DIST)/$(MOZ_PKG_DIR)
 ifndef MOZ_THUNDERBIRD
 	# Package mozharness
 	$(call py_action,test_archive, \
 		mozharness \
 		$(ABS_DIST)/$(PKG_PATH)$(MOZHARNESS_PACKAGE))
 endif # MOZ_THUNDERBIRD
 ifdef MOZ_PACKAGE_JSSHELL
 	# Package JavaScript Shell
diff --git a/toolkit/toolkit.mozbuild b/toolkit/toolkit.mozbuild
--- a/toolkit/toolkit.mozbuild
+++ b/toolkit/toolkit.mozbuild
@@ -151,26 +151,26 @@ if CONFIG['MOZ_RUST']:
 DIRS += [
     '/toolkit/library/StaticXULComponentsEnd',
     '/toolkit/library',
 ]
 
 if 'gtk' in CONFIG['MOZ_WIDGET_TOOLKIT']:
     DIRS += ['/toolkit/system/gnome']
 
-DIRS += ['/addon-sdk']
+#DIRS += ['/addon-sdk']
 
 if CONFIG['ENABLE_MARIONETTE']:
     DIRS += [
         '/testing/firefox-ui',
         '/testing/marionette',
     ]
 
 DIRS += [
-    '/tools/quitter',
+#    '/tools/quitter',
     '/media/gmp-clearkey/0.1',
 ]
 
 if CONFIG['ENABLE_TESTS']:
     DIRS += [
         '/testing/mochitest',
         '/testing/xpcshell',
         '/testing/tools/minidumpwriter',
diff --git a/widget/PuppetWidget.cpp b/widget/PuppetWidget.cpp
--- a/widget/PuppetWidget.cpp
+++ b/widget/PuppetWidget.cpp
@@ -1426,16 +1426,23 @@ NS_IMETHODIMP
 PuppetScreenManager::ScreenForId(uint32_t aId,
                                  nsIScreen** outScreen)
 {
   NS_IF_ADDREF(*outScreen = mOneScreen.get());
   return NS_OK;
 }
 
 NS_IMETHODIMP
+PuppetScreenManager::ScreenForIndex(uint32_t aIndex, nsIScreen**outScreen)
+{
+  NS_IF_ADDREF(*outScreen = mOneScreen.get());
+  return NS_OK;
+}
+
+NS_IMETHODIMP
 PuppetScreenManager::GetPrimaryScreen(nsIScreen** outScreen)
 {
   NS_IF_ADDREF(*outScreen = mOneScreen.get());
   return NS_OK;
 }
 
 NS_IMETHODIMP
 PuppetScreenManager::ScreenForRect(int32_t inLeft,
@@ -1583,8 +1590,9 @@ PuppetWidget::OnWindowedPluginKeyEvent(c
     return NS_ERROR_FAILURE;
   }
   mKeyEventInPluginCallbacks.AppendElement(aCallback);
   return NS_SUCCESS_EVENT_HANDLED_ASYNCHRONOUSLY;
 }
 
 } // namespace widget
 } // namespace mozilla
+
diff --git a/widget/cocoa/nsCocoaUtils.mm b/widget/cocoa/nsCocoaUtils.mm
--- a/widget/cocoa/nsCocoaUtils.mm
+++ b/widget/cocoa/nsCocoaUtils.mm
@@ -301,18 +301,22 @@ void nsCocoaUtils::PrepareForNativeAppMo
   NS_OBJC_BEGIN_TRY_ABORT_BLOCK;
 
   // Don't do anything if this is embedding. We'll assume that if there is no hidden
   // window we shouldn't do anything, and that should cover the embedding case.
   nsMenuBarX* hiddenWindowMenuBar = nsMenuUtilsX::GetHiddenWindowMenuBar();
   if (!hiddenWindowMenuBar)
     return;
 
+  // XXX BLUEGRIFFON ; do NOT paint the hidden menubar because otherwise, that's
+  // what's show when you close a filepicker... And in that case, menus are mostly
+  // disabled and inable to operate even on a visible window...
+   // First put up the hidden window menu bar so that app menu event handling is correct.
   // First put up the hidden window menu bar so that app menu event handling is correct.
-  hiddenWindowMenuBar->Paint();
+  //hiddenWindowMenuBar->Paint();
 
   NSMenu* mainMenu = [NSApp mainMenu];
   NS_ASSERTION([mainMenu numberOfItems] > 0, "Main menu does not have any items, something is terribly wrong!");
   
   // Create new menu bar for use with modal dialog
   NSMenu* newMenuBar = [[NSMenu alloc] initWithTitle:@""];
   
   // Swap in our app menu. Note that the event target is whatever window is up when
diff --git a/widget/cocoa/nsColorPicker.h b/widget/cocoa/nsColorPicker.h
--- a/widget/cocoa/nsColorPicker.h
+++ b/widget/cocoa/nsColorPicker.h
@@ -17,17 +17,17 @@ class mozIDOMWindowProxy;
 @class NSColor;
 
 class nsColorPicker final : public nsIColorPicker
 {
 public:
   NS_DECL_ISUPPORTS
 
   NS_IMETHOD Init(mozIDOMWindowProxy* aParent, const nsAString& aTitle,
-                  const nsAString& aInitialColor) override;
+                  const nsAString& aInitialColor, bool aShowAlpha) override;
   NS_IMETHOD Open(nsIColorPickerShownCallback* aCallback) override;
 
   // For NSColorPanelWrapper.
   void Update(NSColor* aColor);
   // Call this method if you are done with this input, but the color picker needs to
   // stay open as it will be associated to another input
   void DoneWithRetarget();
   // Same as DoneWithRetarget + clean the static instance of sColorPanelWrapper,
@@ -39,12 +39,13 @@ private:
 
   static NSColor* GetNSColorFromHexString(const nsAString& aColor);
   static void GetHexStringFromNSColor(NSColor* aColor, nsAString& aResult);
 
   static NSColorPanelWrapper* sColorPanelWrapper;
 
   nsString             mTitle;
   nsString             mColor;
+  bool               mShowsAlpha;
   nsCOMPtr<nsIColorPickerShownCallback> mCallback;
 };
 
 #endif // nsColorPicker_h_
diff --git a/widget/cocoa/nsColorPicker.mm b/widget/cocoa/nsColorPicker.mm
--- a/widget/cocoa/nsColorPicker.mm
+++ b/widget/cocoa/nsColorPicker.mm
@@ -4,16 +4,18 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #import <Cocoa/Cocoa.h>
 
 #include "nsColorPicker.h"
 #include "nsCocoaUtils.h"
 #include "nsThreadUtils.h"
 
+#include "nsCSSParser.h"
+
 using namespace mozilla;
 
 static unsigned int
 HexStrToInt(NSString* str)
 {
   unsigned int result = 0;
 
   for (unsigned int i = 0; i < [str length]; ++i) {
@@ -32,39 +34,40 @@ HexStrToInt(NSString* str)
 }
 
 @interface NSColorPanelWrapper : NSObject <NSWindowDelegate>
 {
   NSColorPanel*  mColorPanel;
   nsColorPicker* mColorPicker;
 }
 - (id)initWithPicker:(nsColorPicker*)aPicker;
-- (void)open:(NSColor*)aInitialColor title:(NSString*)aTitle;
+- (void)open:(NSColor*)aInitialColor title:(NSString*)aTitle showsAlpha:(BOOL)aShowsAlpha;
 - (void)retarget:(nsColorPicker*)aPicker;
 - (void)colorChanged:(NSColorPanel*)aPanel;
 @end
 
 @implementation NSColorPanelWrapper
 - (id)initWithPicker:(nsColorPicker*)aPicker
 {
   mColorPicker = aPicker;
   mColorPanel = [NSColorPanel sharedColorPanel];
 
   self = [super init];
   return self;
 }
 
-- (void)open:(NSColor*)aInitialColor title:(NSString*)aTitle
+- (void)open:(NSColor*)aInitialColor title:(NSString*)aTitle showsAlpha:(BOOL)aShowsAlpha
 {
   [mColorPanel setTitle:aTitle];
   [mColorPanel setColor:aInitialColor];
   [mColorPanel setTarget:self];
+  [mColorPanel setShowsAlpha:aShowsAlpha];
   [mColorPanel setAction:@selector(colorChanged:)];
   [mColorPanel setDelegate:self];
-  [mColorPanel makeKeyAndOrderFront:nil];
+  [mColorPanel orderFront:nil];
 }
 
 - (void)colorChanged:(NSColorPanel*)aPanel
 {
   mColorPicker->Update([mColorPanel color]);
 }
 
 - (void)windowWillClose:(NSNotification*)aNotification
@@ -98,83 +101,100 @@ NS_IMPL_ISUPPORTS(nsColorPicker, nsIColo
 NSColorPanelWrapper* nsColorPicker::sColorPanelWrapper = nullptr;
 
 nsColorPicker::~nsColorPicker()
 {
 }
 
 NS_IMETHODIMP
 nsColorPicker::Init(mozIDOMWindowProxy* aParent, const nsAString& aTitle,
-                    const nsAString& aInitialColor)
+                    const nsAString& aInitialColor, bool aShowAlpha)
 {
   MOZ_ASSERT(NS_IsMainThread(),
       "Color pickers can only be opened from main thread currently");
   mTitle = aTitle;
   mColor = aInitialColor;
+  mShowsAlpha = aShowAlpha;
 
   if (sColorPanelWrapper) {
     // Update current wrapper to target the new input instead
     [sColorPanelWrapper retarget:this];
   } else {
     // Create a brand new color panel wrapper
     sColorPanelWrapper = [[NSColorPanelWrapper alloc] initWithPicker:this];
   }
   return NS_OK;
 }
 
 /* static */ NSColor*
 nsColorPicker::GetNSColorFromHexString(const nsAString& aColor)
 {
-  NSString* str = nsCocoaUtils::ToNSString(aColor);
+  nsCSSValue value;
+  nsCSSParser parser;
+  if (!parser.ParseColorString(aColor, nullptr, 0, value)) {
+    return [NSColor colorWithDeviceRed: 0 green: 0 blue: 0 alpha: 1];
+  }
 
-  double red = HexStrToInt([str substringWithRange:NSMakeRange(1, 2)]) / 255.0;
-  double green = HexStrToInt([str substringWithRange:NSMakeRange(3, 2)]) / 255.0;
-  double blue = HexStrToInt([str substringWithRange:NSMakeRange(5, 2)]) / 255.0;
+  nscolor color;
+  if (!nsRuleNode::ComputeColor(value, nullptr, nullptr, color)) {
+    return [NSColor colorWithDeviceRed: 0 green: 0 blue: 0 alpha: 1];
+  }
 
-  return [NSColor colorWithDeviceRed: red green: green blue: blue alpha: 1.0];
+  return [NSColor colorWithRed: ((float)NS_GET_R(color))/255.0
+                         green: ((float)NS_GET_G(color))/255.0
+                          blue: ((float)NS_GET_B(color))/255.0
+                         alpha: ((float)NS_GET_A(color))/255.0];
 }
 
 /* static */ void
 nsColorPicker::GetHexStringFromNSColor(NSColor* aColor, nsAString& aResult)
 {
-  CGFloat redFloat, greenFloat, blueFloat;
-
-  NSColor* color = aColor;
-  @try {
-    [color getRed:&redFloat green:&greenFloat blue:&blueFloat alpha: nil];
-  } @catch (NSException* e) {
-    color = [color colorUsingColorSpace:[NSColorSpace genericRGBColorSpace]];
-    [color getRed:&redFloat green:&greenFloat blue:&blueFloat alpha: nil];
+  CGFloat redFloat, greenFloat, blueFloat, alphaFloat;
+  [aColor getRed: &redFloat green: &greenFloat blue: &blueFloat alpha: &alphaFloat];
+  if (alphaFloat < 1.0f) {
+    nsCocoaUtils::GetStringForNSString([NSString stringWithFormat:@"rgba(%d, %d, %d, %1.2f)",
+                                         (int)(redFloat * 255 + 0.5f),
+                                         (int)(greenFloat * 255 + 0.5f),
+                                         (int)(blueFloat * 255 + 0.5f),
+                                         (float) alphaFloat],
+                                       aResult);
   }
-
-  nsCocoaUtils::GetStringForNSString([NSString stringWithFormat:@"#%02x%02x%02x",
-                                       (int)(redFloat * 255),
-                                       (int)(greenFloat * 255),
-                                       (int)(blueFloat * 255)],
-                                     aResult);
+  else {
+    nsCocoaUtils::GetStringForNSString([NSString stringWithFormat:@"#%02x%02x%02x",
+                                         (int)(redFloat * 255 + 0.5f),
+                                         (int)(greenFloat * 255 + 0.5f),
+                                         (int)(blueFloat * 255 + 0.5f)],
+                                       aResult);
+  }
 }
 
 NS_IMETHODIMP
 nsColorPicker::Open(nsIColorPickerShownCallback* aCallback)
 {
   MOZ_ASSERT(aCallback);
   mCallback = aCallback;
 
   [sColorPanelWrapper open:GetNSColorFromHexString(mColor)
-              title:nsCocoaUtils::ToNSString(mTitle)];
+              title:nsCocoaUtils::ToNSString(mTitle)
+              showsAlpha:mShowsAlpha];
 
   NS_ADDREF_THIS();
 
   return NS_OK;
 }
 
 void
 nsColorPicker::Update(NSColor* aColor)
 {
-  GetHexStringFromNSColor(aColor, mColor);
+  NSColor *color = aColor;
+  if ([[aColor colorSpaceName] isEqualToString:NSNamedColorSpace])        {
+    color = [aColor colorUsingColorSpace:[NSColorSpace genericRGBColorSpace]];
+  }
+
+  GetHexStringFromNSColor(color, mColor);
   mCallback->Update(mColor);
 }
 
 void
 nsColorPicker::DoneWithRetarget()
 {
   mCallback->Done(EmptyString());
   mCallback = nullptr;
diff --git a/widget/cocoa/nsMenuItemX.mm b/widget/cocoa/nsMenuItemX.mm
--- a/widget/cocoa/nsMenuItemX.mm
+++ b/widget/cocoa/nsMenuItemX.mm
@@ -254,16 +254,39 @@ void nsMenuItemX::SetKeyEquiv()
         }
       }
 
       nsAutoString modifiersStr;
       keyContent->GetAttr(kNameSpaceID_None, nsGkAtoms::modifiers, modifiersStr);
       uint8_t modifiers = nsMenuUtilsX::GeckoModifiersForNodeAttribute(modifiersStr);
 
       unsigned int macModifiers = nsMenuUtilsX::MacModifiersForGeckoModifiers(modifiers);
+      // If we're empty, try the keyCode instead.
+      if (keyChar.Equals(NS_LITERAL_STRING(" ")) || keyChar.IsEmpty()) {
+
+        keyContent->GetAttr(kNameSpaceID_None, nsGkAtoms::keycode, keyChar);
+
+        if (keyChar.Equals(NS_LITERAL_STRING("VK_F2"))) {
+          unichar ch[1];
+          ch[0] = NSF2FunctionKey;
+          macModifiers |= NSFunctionKeyMask;
+          [mNativeMenuItem setKeyEquivalentModifierMask:macModifiers];
+          [mNativeMenuItem setKeyEquivalent:[NSString stringWithCharacters:ch length:1]];
+          return;
+        }
+        else if (keyChar.Equals(NS_LITERAL_STRING("VK_F4"))) {
+          unichar ch[1];
+          ch[0] = NSF4FunctionKey;
+          macModifiers |= NSFunctionKeyMask;
+          [mNativeMenuItem setKeyEquivalentModifierMask:macModifiers];
+          [mNativeMenuItem setKeyEquivalent:[NSString stringWithCharacters:ch length:1]];
+          return;
+        }
+      }
+
       [mNativeMenuItem setKeyEquivalentModifierMask:macModifiers];
 
       NSString *keyEquivalent = [[NSString stringWithCharacters:(unichar*)keyChar.get()
                                                          length:keyChar.Length()] lowercaseString];
       if ([keyEquivalent isEqualToString:@" "])
         [mNativeMenuItem setKeyEquivalent:@""];
       else
         [mNativeMenuItem setKeyEquivalent:keyEquivalent];
diff --git a/widget/cocoa/nsNativeThemeCocoa.mm b/widget/cocoa/nsNativeThemeCocoa.mm
--- a/widget/cocoa/nsNativeThemeCocoa.mm
+++ b/widget/cocoa/nsNativeThemeCocoa.mm
@@ -2594,17 +2594,17 @@ nsNativeThemeCocoa::DrawWidgetBackground
     }
       break;
 
     case NS_THEME_WINDOW_TITLEBAR: {
       NSWindow* win = NativeWindowForFrame(aFrame);
       BOOL isMain = [win isMainWindow];
       float unifiedToolbarHeight = [win isKindOfClass:[ToolbarWindow class]] ?
         [(ToolbarWindow*)win unifiedToolbarHeight] : macRect.size.height;
-      DrawNativeTitlebar(cgContext, macRect, unifiedToolbarHeight, isMain, YES);
+      // DrawNativeTitlebar(cgContext, macRect, unifiedToolbarHeight, isMain, YES);
     }
       break;
 
     case NS_THEME_STATUSBAR: 
       DrawStatusBar(cgContext, macRect, aFrame);
       break;
 
     case NS_THEME_MENULIST:
diff --git a/widget/cocoa/nsScreenManagerCocoa.mm b/widget/cocoa/nsScreenManagerCocoa.mm
--- a/widget/cocoa/nsScreenManagerCocoa.mm
+++ b/widget/cocoa/nsScreenManagerCocoa.mm
@@ -145,8 +145,28 @@ nsScreenManagerCocoa::ScreenForNativeWid
         return NS_OK;
     }
 
     *outScreen = nullptr;
     return NS_OK;
 
     NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT;
 }
+
+NS_IMETHODIMP
+nsScreenManagerCocoa::ScreenForIndex(uint32_t aIndex, nsIScreen**outScreen)
+{
+    NS_OBJC_BEGIN_TRY_ABORT_BLOCK_NSRESULT;
+
+    uint32_t numberOfScreens;
+    GetNumberOfScreens(&numberOfScreens);
+    if (aIndex >= numberOfScreens)
+        return NS_ERROR_FAILURE;
+  
+    NSScreen *sc = [[NSScreen screens] objectAtIndex: aIndex];
+  
+    *outScreen = ScreenForCocoaScreen(sc);
+    NS_ADDREF(*outScreen);
+  
+    return NS_OK;
+  
+    NS_OBJC_END_TRY_ABORT_BLOCK_NSRESULT;
+}
diff --git a/widget/gtk/mozgtk/mozgtk.c b/widget/gtk/mozgtk/mozgtk.c
--- a/widget/gtk/mozgtk/mozgtk.c
+++ b/widget/gtk/mozgtk/mozgtk.c
@@ -159,19 +159,21 @@ STUB(gtk_clipboard_get)
 STUB(gtk_clipboard_request_contents)
 STUB(gtk_clipboard_request_text)
 STUB(gtk_clipboard_set_can_store)
 STUB(gtk_clipboard_set_with_data)
 STUB(gtk_clipboard_store)
 STUB(gtk_color_selection_dialog_get_color_selection)
 STUB(gtk_color_selection_dialog_get_type)
 STUB(gtk_color_selection_dialog_new)
+STUB(gtk_color_selection_get_current_alpha)
 STUB(gtk_color_selection_get_current_color)
 STUB(gtk_color_selection_get_type)
 STUB(gtk_color_selection_set_current_color)
+STUB(gtk_color_selection_set_has_opacity_control)
 STUB(gtk_combo_box_get_active)
 STUB(gtk_combo_box_get_type)
 STUB(gtk_combo_box_new)
 STUB(gtk_combo_box_new_with_entry)
 STUB(gtk_combo_box_set_active)
 STUB(gtk_combo_box_text_get_type)
 STUB(gtk_combo_box_text_new)
 STUB(gtk_container_add)
diff --git a/widget/gtk/nsColorPicker.cpp b/widget/gtk/nsColorPicker.cpp
--- a/widget/gtk/nsColorPicker.cpp
+++ b/widget/gtk/nsColorPicker.cpp
@@ -7,16 +7,18 @@
 
 #include "nsColor.h"
 #include "nsColorPicker.h"
 #include "nsGtkUtils.h"
 #include "nsIWidget.h"
 #include "WidgetUtils.h"
 #include "nsPIDOMWindow.h"
 
+#include "nsCSSParser.h"
+
 NS_IMPL_ISUPPORTS(nsColorPicker, nsIColorPicker)
 
 #if defined(ACTIVATE_GTK3_COLOR_PICKER) && GTK_CHECK_VERSION(3,4,0)
 int nsColorPicker::convertGdkRgbaComponent(gdouble color_component) {
   // GdkRGBA value is in range [0.0..1.0]. We need something in range [0..255]
   return color_component * 255 + 0.5;
 }
 
@@ -55,38 +57,39 @@ GtkColorSelection* nsColorPicker::Widget
 {
   return GTK_COLOR_SELECTION(gtk_color_selection_dialog_get_color_selection(
                              GTK_COLOR_SELECTION_DIALOG(widget)));
 }
 #endif
 
 NS_IMETHODIMP nsColorPicker::Init(mozIDOMWindowProxy *aParent,
                                   const nsAString& title,
-                                  const nsAString& initialColor)
+                                  const nsAString& initialColor,
+                                  bool aShowsAlpha)
 {
   auto* parent = nsPIDOMWindowOuter::From(aParent);
   mParentWidget = mozilla::widget::WidgetUtils::DOMWindowToWidget(parent);
   mTitle = title;
   mInitialColor = initialColor;
+  mShowsAlpha = aShowsAlpha;
 
   return NS_OK;
 }
 
 NS_IMETHODIMP nsColorPicker::Open(nsIColorPickerShownCallback *aColorPickerShownCallback)
 {
 
-  // Input color string should be 7 length (i.e. a string representing a valid
-  // simple color)
-  if (mInitialColor.Length() != 7) {
+  nsCSSValue value;
+  nsCSSParser parser;
+  if (!parser.ParseColorString(mInitialColor, nullptr, 0, value)) {
     return NS_ERROR_FAILURE;
   }
 
-  const nsAString& withoutHash  = StringTail(mInitialColor, 6);
   nscolor color;
-  if (!NS_HexToRGBA(withoutHash, nsHexColorType::NoAlpha, &color)) {
+  if (!nsRuleNode::ComputeColor(value, nullptr, nullptr, color)) {
     return NS_ERROR_FAILURE;
   }
 
   if (mCallback) {
     // It means Open has already been called: this is not allowed
     NS_WARNING("mCallback is already set. Open called twice?");
     return NS_ERROR_FAILURE;
   }
@@ -98,32 +101,34 @@ NS_IMETHODIMP nsColorPicker::Open(nsICol
   
 #if defined(ACTIVATE_GTK3_COLOR_PICKER) && GTK_CHECK_VERSION(3,4,0)
   GtkWidget* color_chooser = gtk_color_chooser_dialog_new(title, parent_window);
     
   if (parent_window) {
       gtk_window_set_destroy_with_parent(GTK_WINDOW(color_chooser), TRUE);
   }
   
-  gtk_color_chooser_set_use_alpha(GTK_COLOR_CHOOSER(color_chooser), FALSE);
+  gtk_color_chooser_set_use_alpha(GTK_COLOR_CHOOSER(color_chooser), mShowsAlpha);
   GdkRGBA color_rgba = convertToRgbaColor(color);    
   gtk_color_chooser_set_rgba(GTK_COLOR_CHOOSER(color_chooser),
                              &color_rgba);
   
   g_signal_connect(GTK_COLOR_CHOOSER(color_chooser), "color-activated",
                    G_CALLBACK(OnColorChanged), this);
 #else
   GtkWidget *color_chooser = gtk_color_selection_dialog_new(title);
   
   if (parent_window) {
     GtkWindow *window = GTK_WINDOW(color_chooser);
     gtk_window_set_transient_for(window, parent_window);
     gtk_window_set_destroy_with_parent(window, TRUE);
   }
 
+  gtk_color_selection_set_has_opacity_control(WidgetGetColorSelection(color_chooser),
+                                              mShowsAlpha);
   GdkColor color_gdk = convertToGdkColor(color);
   gtk_color_selection_set_current_color(WidgetGetColorSelection(color_chooser),
                                         &color_gdk);
   
   g_signal_connect(WidgetGetColorSelection(color_chooser), "color-changed",
                    G_CALLBACK(OnColorChanged), this);
 #endif
 
@@ -177,20 +182,38 @@ nsColorPicker::Update(GtkColorSelection*
   }
 }
 
 void nsColorPicker::ReadValueFromColorSelection(GtkColorSelection* colorselection)
 {
   GdkColor rgba;
   gtk_color_selection_get_current_color(colorselection, &rgba);
 
-  mColor.Assign('#');
-  mColor += ToHexString(convertGdkColorComponent(rgba.red));
-  mColor += ToHexString(convertGdkColorComponent(rgba.green));
-  mColor += ToHexString(convertGdkColorComponent(rgba.blue));
+  guint16 alphaValue = 65535;
+  if (mShowsAlpha) {
+    alphaValue = gtk_color_selection_get_current_alpha(colorselection);
+  }
+
+  if (alphaValue == 65535) {
+    mColor.Assign('#');
+    mColor += ToHexString(convertGdkColorComponent(rgba.red));
+    mColor += ToHexString(convertGdkColorComponent(rgba.green));
+    mColor += ToHexString(convertGdkColorComponent(rgba.blue));
+  }
+  else {
+    mColor.AssignWithConversion("rgba(");
+    mColor.AppendInt(convertGdkColorComponent(rgba.red), 10);
+    mColor.AppendLiteral(", ");
+    mColor.AppendInt(convertGdkColorComponent(rgba.green), 10);
+    mColor.AppendLiteral(", ");
+    mColor.AppendInt(convertGdkColorComponent(rgba.blue), 10);
+    mColor.AppendLiteral(", ");
+    mColor.AppendFloat(((float)alphaValue / 65535));
+    mColor.AppendLiteral(")");
+  }
 }
 #endif
 
 /* static */ void
 nsColorPicker::OnResponse(GtkWidget* color_chooser, gint response_id,
                           gpointer user_data)
 {
   static_cast<nsColorPicker*>(user_data)->
diff --git a/widget/gtk/nsColorPicker.h b/widget/gtk/nsColorPicker.h
--- a/widget/gtk/nsColorPicker.h
+++ b/widget/gtk/nsColorPicker.h
@@ -63,11 +63,12 @@ private:
 
   void Done(GtkWidget* dialog, gint response_id);
 
   nsCOMPtr<nsIWidget> mParentWidget;
   nsCOMPtr<nsIColorPickerShownCallback> mCallback;
   nsString mTitle;
   nsString mColor;
   nsString mInitialColor;
+  bool mShowsAlpha;
 };
 
 #endif // nsColorPicker_h__
diff --git a/widget/gtk/nsScreenManagerGtk.cpp b/widget/gtk/nsScreenManagerGtk.cpp
--- a/widget/gtk/nsScreenManagerGtk.cpp
+++ b/widget/gtk/nsScreenManagerGtk.cpp
@@ -359,8 +359,20 @@ nsScreenManagerGtk :: ScreenForNativeWid
     gdk_window_get_origin(GDK_WINDOW(aWidget), &x, &y);
     rv = ScreenForRect(x, y, width, height, outScreen);
   } else {
     rv = GetPrimaryScreen(outScreen);
   }
 
   return rv;
 }
+
+NS_IMETHODIMP
+nsScreenManagerGtk::ScreenForIndex(uint32_t aIndex, nsIScreen**outScreen)
+{
+    uint32_t numberOfScreens;
+    GetNumberOfScreens(&numberOfScreens);
+    if (aIndex >= numberOfScreens)
+        return NS_ERROR_FAILURE;
+
+    NS_IF_ADDREF(*outScreen = mCachedScreenArray[aIndex]);
+    return NS_OK;
+}
diff --git a/widget/nsColorPickerProxy.cpp b/widget/nsColorPickerProxy.cpp
--- a/widget/nsColorPickerProxy.cpp
+++ b/widget/nsColorPickerProxy.cpp
@@ -9,26 +9,27 @@
 #include "mozilla/dom/TabChild.h"
 
 using namespace mozilla::dom;
 
 NS_IMPL_ISUPPORTS(nsColorPickerProxy, nsIColorPicker)
 
 NS_IMETHODIMP
 nsColorPickerProxy::Init(mozIDOMWindowProxy* aParent, const nsAString& aTitle,
-                         const nsAString& aInitialColor)
+                         const nsAString& aInitialColor, bool aShowsAlpha)
 {
   TabChild* tabChild = TabChild::GetFrom(aParent);
   if (!tabChild) {
     return NS_ERROR_FAILURE;
   }
 
   tabChild->SendPColorPickerConstructor(this,
                                         nsString(aTitle),
-                                        nsString(aInitialColor));
+                                        nsString(aInitialColor),
+                                        aShowsAlpha);
   NS_ADDREF_THIS();
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsColorPickerProxy::Open(nsIColorPickerShownCallback* aColorPickerShownCallback)
 {
   NS_ENSURE_STATE(!mCallback);
diff --git a/widget/nsIColorPicker.idl b/widget/nsIColorPicker.idl
--- a/widget/nsIColorPicker.idl
+++ b/widget/nsIColorPicker.idl
@@ -11,17 +11,17 @@ interface mozIDOMWindowProxy;
 /**
  * nsIColorPicker is representing colors as strings because the internal
  * representation will depend on the underlying backend.
  * The format of the colors taken in input and returned will always follow the
  * format of the <input type='color'> value as described in the HTML
  * specifications.
  */
 
-[scriptable, uuid(d2ce78d1-40b5-49d1-b66d-5801fcb9a385)]
+[scriptable, uuid(645FAD1F-2B55-42E1-AC15-DB4A9DF27209)]
 interface nsIColorPickerShownCallback : nsISupports
 {
  /**
   * Callback called when the color picker requests a color update.
   * This callback can not be called after done() was called.
   * When this callback is used, the consumer can assume that the color value has
   * changed.
   *
@@ -57,16 +57,17 @@ interface nsIColorPicker : nsISupports
   *
   * @param      parent       nsIDOMWindow parent. This dialog will be dependent
   *                          on this parent. parent must be non-null.
   * @param      title        The title for the color picker widget.
   * @param      initialColor The color to show when the widget is opened. The
   *                          parameter has to follow the format specified on top
   *                          of this file.
   */
-  void init(in mozIDOMWindowProxy parent, in AString title, in AString initialColor);
+  void init(in mozIDOMWindowProxy parent, in AString title, in AString initialColor,
+            in boolean aShowAlpha);
 
  /**
   * Opens the color dialog asynchrounously.
   * The results are provided via the callback object.
   */
   void open(in nsIColorPickerShownCallback aColorPickerShownCallback);
 };
diff --git a/widget/nsIScreenManager.idl b/widget/nsIScreenManager.idl
--- a/widget/nsIScreenManager.idl
+++ b/widget/nsIScreenManager.idl
@@ -13,16 +13,18 @@ interface nsIScreenManager : nsISupports
     //
     // Returns the screen that contains the rectangle. If the rect overlaps
     // multiple screens, it picks the screen with the greatest area of intersection.
     //
     // The coordinates are in pixels (not twips) and in screen coordinates.
     //
   nsIScreen screenForRect ( in long left, in long top, in long width, in long height ) ;
 
+  nsIScreen screenForIndex ( in unsigned long index);
+
     //
     // Returns the screen corresponding to the id. If no such screen exists,
     // this will throw NS_ERROR_FAILURE. The id is a unique numeric value
     // assigned to each screen, and is an attribute available on the nsIScreen
     // interface.
   nsIScreen screenForId ( in unsigned long id ) ;
 
     // The screen with the menubar/taskbar. This shouldn't be needed very
diff --git a/widget/nsScreenManagerProxy.cpp b/widget/nsScreenManagerProxy.cpp
--- a/widget/nsScreenManagerProxy.cpp
+++ b/widget/nsScreenManagerProxy.cpp
@@ -80,16 +80,24 @@ NS_IMETHODIMP
 nsScreenManagerProxy::ScreenForId(uint32_t aId, nsIScreen** outScreen)
 {
   // At this time, there's no need for child processes to query for
   // screens by ID.
   return NS_ERROR_NOT_IMPLEMENTED;
 }
 
 NS_IMETHODIMP
+nsScreenManagerProxy::ScreenForIndex(uint32_t aIndex, nsIScreen**outScreen)
+{
+  // At this time, there's no need for child processes to query for
+  // screens by ID.
+  return NS_ERROR_NOT_IMPLEMENTED;
+}
+
+NS_IMETHODIMP
 nsScreenManagerProxy::ScreenForRect(int32_t inLeft,
                                     int32_t inTop,
                                     int32_t inWidth,
                                     int32_t inHeight,
                                     nsIScreen** outScreen)
 {
   bool success = false;
   ScreenDetails details;
diff --git a/widget/windows/nsColorPicker.cpp b/widget/windows/nsColorPicker.cpp
--- a/widget/windows/nsColorPicker.cpp
+++ b/widget/windows/nsColorPicker.cpp
@@ -187,22 +187,24 @@ nsColorPicker::~nsColorPicker()
 {
 }
 
 NS_IMPL_ISUPPORTS(nsColorPicker, nsIColorPicker)
 
 NS_IMETHODIMP
 nsColorPicker::Init(mozIDOMWindowProxy* parent,
                     const nsAString& title,
-                    const nsAString& aInitialColor)
+                    const nsAString& aInitialColor,
+                    bool aShowsAlpha)
 {
   NS_PRECONDITION(parent,
       "Null parent passed to colorpicker, no color picker for you!");
   mParentWidget =  WidgetUtils::DOMWindowToWidget(nsPIDOMWindowOuter::From(parent));
   mInitialColor = ColorStringToRGB(aInitialColor);
+  mShowsAlpha = aShowsAlpha;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsColorPicker::Open(nsIColorPickerShownCallback* aCallback)
 {
   NS_ENSURE_ARG(aCallback);
   nsCOMPtr<nsIRunnable> event = new AsyncColorChooser(mInitialColor,
diff --git a/widget/windows/nsColorPicker.h b/widget/windows/nsColorPicker.h
--- a/widget/windows/nsColorPicker.h
+++ b/widget/windows/nsColorPicker.h
@@ -43,17 +43,19 @@ class nsColorPicker :
   virtual ~nsColorPicker();
 
 public:
   nsColorPicker();
 
   NS_DECL_ISUPPORTS
 
   NS_IMETHOD Init(mozIDOMWindowProxy* parent, const nsAString& title,
-                  const nsAString& aInitialColor);
+                  const nsAString& aInitialColor,
+                  bool aShowsAlpha);
   NS_IMETHOD Open(nsIColorPickerShownCallback* aCallback);
 
 private:
   COLORREF mInitialColor;
   nsCOMPtr<nsIWidget> mParentWidget;
+  bool mShowsAlpha;
 };
 
 #endif // nsColorPicker_h__
diff --git a/widget/windows/nsScreenManagerWin.cpp b/widget/windows/nsScreenManagerWin.cpp
--- a/widget/windows/nsScreenManagerWin.cpp
+++ b/widget/windows/nsScreenManagerWin.cpp
@@ -174,8 +174,22 @@ nsScreenManagerWin::GetSystemDefaultScal
 
 NS_IMETHODIMP
 nsScreenManagerWin::ScreenForNativeWidget(void *aWidget, nsIScreen **outScreen)
 {
   HMONITOR mon = MonitorFromWindow((HWND) aWidget, MONITOR_DEFAULTTOPRIMARY);
   *outScreen = CreateNewScreenObject(mon);
   return NS_OK;
 }
+
+NS_IMETHODIMP
+nsScreenManagerWin::ScreenForIndex(uint32_t aIndex, nsIScreen**outScreen)
+{
+  *outScreen = nullptr;
+
+  if (aIndex < mScreenList.Length()) {
+    ScreenListItem& curr = mScreenList[aIndex];
+    NS_IF_ADDREF(*outScreen = curr.mScreen.get());
+    return NS_OK;
+  }
+
+  return NS_ERROR_FAILURE;
+}
